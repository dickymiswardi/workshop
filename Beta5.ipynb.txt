{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dickymiswardi/videomurottal/blob/main/Beta5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Link tutorial: YouTube.com"
      ],
      "metadata": {
        "id": "8Z2QyLOrxeTW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Download font: https://s.id/hafsfont"
      ],
      "metadata": {
        "id": "DV5nvkgnxzX8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Download VN Video Editor: https://s.id/vlognow"
      ],
      "metadata": {
        "id": "kLS0CKpYx0vB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title 1. INSTALL WHISPER FOR TEKS QURAN VIDEO MUROTTAL BY DICKY MISWARDI { display-mode: \"form\" }\n",
        "#@markdown Klik untuk menginstal.\n",
        "\n",
        "%%capture\n",
        "# INSTALL WHISPER AI\n",
        "!pip install git+https://github.com/openai/whisper.git\n",
        "!pip install --upgrade --no-deps --force-reinstall git+https://github.com/openai/whisper.git\n",
        "!sudo apt update && sudo apt install ffmpeg\n",
        "!pip install requests\n",
        "!pip install ipywidgets"
      ],
      "metadata": {
        "id": "hRUbQ9bmZ5kR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title 2. TRANSKRIP AUDIO QURAN TO ARABIC TEXT { display-mode: \"form\" }\n",
        "#@markdown Isi link .mp3 dari internet atau file di Google Drive kemudian klik proses.\n",
        "\n",
        "import whisper\n",
        "\n",
        "def transcribe_audio_to_srt(audio_path, srt_path):\n",
        "    # Load Whisper high accuracy model\n",
        "    model = whisper.load_model(\"medium\")\n",
        "\n",
        "    # Transcribe the audio file\n",
        "    result = model.transcribe(audio_path, language=\"ar\")\n",
        "\n",
        "    # Get segments from the transcription result\n",
        "    segments = result['segments']\n",
        "\n",
        "    # Write to SRT file and print to console\n",
        "    with open(srt_path, 'w', encoding='utf-8') as srt_file:\n",
        "        for i, segment in enumerate(segments):\n",
        "            start = segment['start']\n",
        "            end = segment['end']\n",
        "            text = segment['text'].strip()\n",
        "\n",
        "            # Convert start and end times to SRT format\n",
        "            start_srt = convert_to_srt_time(start)\n",
        "            end_srt = convert_to_srt_time(end)\n",
        "\n",
        "            # Create the SRT block\n",
        "            srt_block = f\"{i + 1}\\n{start_srt} --> {end_srt}\\n{text}\\n\\n\"\n",
        "\n",
        "            # Write to file\n",
        "            srt_file.write(srt_block)\n",
        "\n",
        "            # Print to console\n",
        "            print(srt_block)\n",
        "\n",
        "def convert_to_srt_time(seconds):\n",
        "    # Convert seconds to hours, minutes, seconds, and milliseconds\n",
        "    hours = int(seconds // 3600)\n",
        "    minutes = int((seconds % 3600) // 60)\n",
        "    seconds = int(seconds % 60)\n",
        "    milliseconds = int((seconds % 1) * 1000)\n",
        "    return f\"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}\"\n",
        "\n",
        "#@title Ganti URL audio di bawah ini sesuai kebutuhan\n",
        "audio_path = \"/.mp3 atau /content/.mp3\"  #@param {type:\"string\"}\n",
        "srt_path = \"output_subtitles.srt\"\n",
        "transcribe_audio_to_srt(audio_path, srt_path)"
      ],
      "metadata": {
        "id": "TaCQzt3rcjMG",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title 3. MENGHITUNG JUMLAH KATA DAN INFORMASI SURAT QURAN { display-mode: \"form\" }\n",
        "#@markdown Klik untuk memproses\n",
        "\n",
        "import re\n",
        "import pandas as pd\n",
        "from IPython.display import display, Javascript\n",
        "import ipywidgets as widgets\n",
        "\n",
        "# Fungsi untuk memparsing file SRT\n",
        "def parse_srt(filename):\n",
        "    with open(filename, 'r', encoding='utf-8') as file:\n",
        "        content = file.read()\n",
        "    # Split by double newlines to separate each subtitle block\n",
        "    blocks = content.split('\\n\\n')\n",
        "    subtitles = []\n",
        "    for block in blocks:\n",
        "        lines = block.split('\\n')\n",
        "        if len(lines) >= 3:\n",
        "            # The subtitle timing is in the second line, and the text is in the following lines\n",
        "            text = ' '.join(lines[2:])\n",
        "            # Remove any HTML tags or special characters\n",
        "            text = re.sub(r'<.*?>', '', text)\n",
        "            # Remove non-alphanumeric characters except spaces\n",
        "            text = re.sub(r'[^\\w\\s]', '', text)\n",
        "            subtitles.append(text)\n",
        "    return subtitles\n",
        "\n",
        "# Fungsi untuk menghitung jumlah kata\n",
        "def count_words(text):\n",
        "    # Split the text into words\n",
        "    words = text.split()\n",
        "    return len(words)\n",
        "\n",
        "# Fungsi untuk menghitung jumlah kata dari setiap subtitle\n",
        "def calculate_word_counts(subtitles):\n",
        "    word_counts = []\n",
        "    for text in subtitles:\n",
        "        word_count = count_words(text)\n",
        "        word_counts.append(word_count)\n",
        "    return word_counts\n",
        "\n",
        "# Fungsi untuk membuat tombol copy\n",
        "def create_copy_button(text):\n",
        "    button = widgets.Button(description=\"Klik copy\")\n",
        "    output = widgets.Output()\n",
        "\n",
        "    def on_button_click(b):\n",
        "        with output:\n",
        "            display(Javascript(\"\"\"\n",
        "            navigator.clipboard.writeText(`{}`);\n",
        "            \"\"\".format(text)))\n",
        "            print(\"Copied to clipboard!\")\n",
        "\n",
        "    button.on_click(on_button_click)\n",
        "    display(button, output)\n",
        "\n",
        "# Data nomor, nama surat, dan jumlah ayat dalam Al-Quran\n",
        "data = {\n",
        "    \"Nomor\": list(range(1, 115)),\n",
        "    \"Nama Surat\": [\n",
        "        \"Al-Fatihah\", \"Al-Baqarah\", \"Ali 'Imran\", \"An-Nisa'\", \"Al-Ma'idah\", \"Al-An'am\",\n",
        "        \"Al-A'raf\", \"Al-Anfal\", \"At-Taubah\", \"Yunus\", \"Hud\", \"Yusuf\", \"Ar-Ra'd\",\n",
        "        \"Ibrahim\", \"Al-Hijr\", \"An-Nahl\", \"Al-Isra'\", \"Al-Kahf\", \"Maryam\", \"Ta-Ha\",\n",
        "        \"Al-Anbiya'\", \"Al-Hajj\", \"Al-Mu'minun\", \"An-Nur\", \"Al-Furqan\", \"Ash-Shu'ara'\",\n",
        "        \"An-Naml\", \"Al-Qasas\", \"Al-Ankabut\", \"Ar-Rum\", \"Luqman\", \"As-Sajdah\", \"Al-Ahzab\",\n",
        "        \"Saba'\", \"Fatir\", \"Ya-Sin\", \"As-Saffat\", \"Sad\", \"Az-Zumar\", \"Ghafir\", \"Fussilat\",\n",
        "        \"Ash-Shura\", \"Az-Zukhruf\", \"Ad-Dukhan\", \"Al-Jathiyah\", \"Al-Ahqaf\", \"Muhammad\",\n",
        "        \"Al-Fath\", \"Al-Hujurat\", \"Qaf\", \"Adh-Dhariyat\", \"At-Tur\", \"An-Najm\", \"Al-Qamar\",\n",
        "        \"Ar-Rahman\", \"Al-Waqi'ah\", \"Al-Hadid\", \"Al-Mujadila\", \"Al-Hashr\", \"Al-Mumtahina\",\n",
        "        \"As-Saff\", \"Al-Jumu'ah\", \"Al-Munafiqun\", \"At-Taghabun\", \"At-Talaq\", \"At-Tahrim\",\n",
        "        \"Al-Mulk\", \"Al-Qalam\", \"Al-Haqqah\", \"Al-Ma'arij\", \"Nuh\", \"Al-Jinn\", \"Al-Muzzammil\",\n",
        "        \"Al-Muddathir\", \"Al-Qiyamah\", \"Al-Insan\", \"Al-Mursalat\", \"An-Naba'\", \"An-Nazi'at\",\n",
        "        \"Abasa\", \"At-Takwir\", \"Al-Infitar\", \"Al-Mutaffifin\", \"Al-Inshiqaq\", \"Al-Buruj\",\n",
        "        \"At-Tariq\", \"Al-A'la\", \"Al-Ghashiyah\", \"Al-Fajr\", \"Al-Balad\", \"Ash-Shams\",\n",
        "        \"Al-Layl\", \"Ad-Duha\", \"Ash-Sharh\", \"At-Tin\", \"Al-Alaq\", \"Al-Qadr\", \"Al-Bayyina\",\n",
        "        \"Az-Zalzalah\", \"Al-Adiyat\", \"Al-Qari'a\", \"At-Takathur\", \"Al-Asr\", \"Al-Humazah\",\n",
        "        \"Al-Fil\", \"Quraish\", \"Al-Ma'un\", \"Al-Kawthar\", \"Al-Kafirun\", \"An-Nasr\",\n",
        "        \"Al-Masad\", \"Al-Ikhlas\", \"Al-Falaq\", \"An-Nas\"\n",
        "    ],\n",
        "    \"Jumlah Ayat\": [\n",
        "        7, 286, 200, 176, 120, 165, 206, 75, 129, 109, 123, 111, 43, 52, 99, 128,\n",
        "        111, 110, 98, 135, 112, 78, 118, 64, 77, 227, 93, 88, 69, 60, 34, 30, 73,\n",
        "        54, 45, 83, 182, 88, 75, 85, 54, 53, 89, 59, 37, 35, 38, 29, 18, 45, 60,\n",
        "        49, 62, 55, 78, 96, 29, 22, 24, 13, 14, 11, 11, 18, 12, 12, 30, 52, 52, 44,\n",
        "        28, 28, 20, 56, 40, 31, 50, 40, 46, 42, 29, 19, 36, 25, 22, 17, 19, 26, 30,\n",
        "        20, 15, 21, 11, 8, 8, 19, 5, 8, 8, 11, 11, 8, 3, 9, 5, 4, 7, 3, 6, 3, 5, 4,\n",
        "        5, 6\n",
        "    ]\n",
        "}\n",
        "\n",
        "# Membuat DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Membuat dropdown\n",
        "dropdown = widgets.Dropdown(\n",
        "    options=[(f\"{row['Nomor']}. {row['Nama Surat']} ({row['Jumlah Ayat']} ayat)\", row['Nama Surat']) for idx, row in df.iterrows()],\n",
        "    description='Surat:'\n",
        ")\n",
        "\n",
        "# Fungsi untuk menampilkan informasi surat\n",
        "def show_surat_info(change):\n",
        "    surat = change['new']\n",
        "    info = df[df['Nama Surat'] == surat].iloc[0]\n",
        "    display(f\"Nomor: {info['Nomor']}, Nama Surat: {info['Nama Surat']}, Jumlah Ayat: {info['Jumlah Ayat']}\")\n",
        "\n",
        "# Menambahkan observer untuk dropdown\n",
        "dropdown.observe(show_surat_info, names='value')\n",
        "\n",
        "# Menampilkan dropdown\n",
        "display(dropdown)\n",
        "\n",
        "#@title Contoh penggunaan\n",
        "#@markdown\n",
        "\n",
        "filename = '/content/output_subtitles.srt'\n",
        "subtitles = parse_srt(filename)\n",
        "word_counts = calculate_word_counts(subtitles)\n",
        "\n",
        "# Menampilkan hasil word_counts\n",
        "print(word_counts)\n",
        "\n",
        "# Membuat tombol copy untuk hasil word_counts tanpa tanda \"[]\"\n",
        "word_counts_str = ', '.join(map(str, word_counts))\n",
        "create_copy_button(word_counts_str)"
      ],
      "metadata": {
        "id": "AzzE6KL-l7hA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title 4. MENGELUARKAN AYAT QURAN RASM UTSMANI { display-mode: \"form\" }\n",
        "#@markdown Isi parameter surah, ayat dan split kemudian klik proses.\n",
        "\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML\n",
        "\n",
        "def get_quran_ayats(surah_number, from_ayat, to_ayat, splits):\n",
        "    combined_text = \"بِسۡمِ ٱللَّهِ ٱلرَّحۡمَـٰنِ ٱلرَّحِیمِ\"\n",
        "    arabic_numerals = [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"]\n",
        "\n",
        "    def convert_to_arabic_number(num):\n",
        "        reversed_num = str(num)[::-1]  # Membalik urutan angka\n",
        "        return ''.join(arabic_numerals[int(digit)] for digit in reversed_num)\n",
        "\n",
        "    def split_text(text, splits):\n",
        "        words = text.split()\n",
        "        result = []\n",
        "        index = 0\n",
        "        for count in splits:\n",
        "            segment = ' '.join(words[index:index + count])\n",
        "            result.append(segment)\n",
        "            index += count\n",
        "        return '\\n\\n'.join(result)  # Menggunakan dua enter untuk jarak antar segmen\n",
        "\n",
        "    for ayat_number in range(from_ayat, to_ayat + 1):\n",
        "        url = f\"https://api.quran.com/api/v4/quran/verses/uthmani?verse_key={surah_number}:{ayat_number}\"\n",
        "        response = requests.get(url)\n",
        "        if response.status_code == 200:\n",
        "            data = response.json()\n",
        "            ayat_text = data['verses'][0]['text_uthmani']\n",
        "            ayat_text = ayat_text.replace(\"ْ\", \"ۡ\")\n",
        "            ayat_text = ayat_text.replace(\"أُو۟\", \"أُوْ\")\n",
        "            ayat_text = ayat_text.replace(\"ا۟\", \"اْ\")\n",
        "            ayat_text = ayat_text.replace(\"لَـَٔا\", \"لَأٓ\")\n",
        "            ayat_text = ayat_text.replace(\"لۡـَٔا\", \"لۡأٓ\")\n",
        "            ayat_text = ayat_text.replace(\"لِيَسُـۥٓـُٔ\", \"لِيَسُـُٔ\")\n",
        "            ayat_text = ayat_text.replace(\"۞\", \"\")  # Hapus tanda ۞\n",
        "            ayat_text += convert_to_arabic_number(ayat_number)\n",
        "            combined_text += \" \" + ayat_text\n",
        "\n",
        "    # Menggabungkan kata yang diakhiri dengan \"ۖ\", \"ۚ\", \"ۗ\", \"ۛ\", \"ۙ\", \"ۘ\", \"ۜ\", dan \"۩\" dengan kata sebelumnya\n",
        "    combined_text = combined_text.replace(\" ۖ\", \"ۖ\").replace(\" ۚ\", \"ۚ\").replace(\" ۗ\", \"ۗ\").replace(\" ۛ\", \"ۛ\").replace(\" ۙ\", \"ۙ\").replace(\" ۘ\", \"ۘ\").replace(\" ۜ\", \"ۜ\").replace(\" ۩\", \"۩\")\n",
        "\n",
        "    combined_text = combined_text.strip()\n",
        "    result_text = split_text(combined_text, splits)\n",
        "\n",
        "    return result_text\n",
        "\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    output_srt_file = 'output_ayat.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)\n",
        "\n",
        "#@title Contoh penggunaan\n",
        "#@markdown\n",
        "\n",
        "#@markdown ### Parameter Surah dan Ayat\n",
        "surah_number = 0  #@param {type:\"number\"}\n",
        "from_ayat = 0  #@param {type:\"number\"}\n",
        "to_ayat = 0  #@param {type:\"number\"}\n",
        "\n",
        "#@markdown ### Splits\n",
        "splits = \"4,\"  #@param {type:\"string\"}\n",
        "splits = [int(x.strip()) for x in splits.split(',')]\n",
        "\n",
        "ayat_texts = get_quran_ayats(surah_number, from_ayat, to_ayat, splits)\n",
        "\n",
        "# Gantikan teks dalam file SRT\n",
        "srt_file_path = '/content/output_subtitles.srt'\n",
        "new_srt_content = replace_srt_text(srt_file_path, ayat_texts)\n",
        "\n",
        "# Tambahkan tombol Copy dan notifikasi\n",
        "def on_copy_button_clicked(b):\n",
        "    js = f\"navigator.clipboard.writeText(`{new_srt_content}`)\"\n",
        "    display(HTML(f\"<script>{js}</script>\"))\n",
        "    copy_label.value = \"Teks berhasil dicopy!\"\n",
        "\n",
        "copy_button = widgets.Button(description=\"Copy\")\n",
        "copy_button.on_click(on_copy_button_clicked)\n",
        "\n",
        "copy_label = widgets.Label(value=\"\")\n",
        "\n",
        "# Cetak hasil file SRT baru di papan layar\n",
        "print(new_srt_content)\n",
        "display(copy_button, copy_label)"
      ],
      "metadata": {
        "id": "5Z5Al3eXjePm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title 5. MENGHITUNG JUMLAH KATA UNTUK TRANSLATE { display-mode: \"form\" }\n",
        "# @markdown Klik untuk menghasilkan kode \"Group Size Input\" pada box \"Indonesian Translate\" dan kode \"Pattern\" pada box \"English Translate.\"\n",
        "\n",
        "def count_words_in_srt(file_path):\n",
        "    with open(file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    word_counts = []\n",
        "    is_subtitle_text = False\n",
        "\n",
        "    for line in lines:\n",
        "        cleaned_line = line.strip()\n",
        "\n",
        "        # Memeriksa apakah baris ini merupakan durasi\n",
        "        if \"-->\" in cleaned_line:\n",
        "            is_subtitle_text = True\n",
        "            continue\n",
        "\n",
        "        # Mengabaikan baris nomor urut\n",
        "        if cleaned_line.isdigit():\n",
        "            is_subtitle_text = False\n",
        "            continue\n",
        "\n",
        "        # Menghitung kata hanya pada baris teks subtitle\n",
        "        if is_subtitle_text and cleaned_line:\n",
        "            word_count = len(cleaned_line.split())\n",
        "            word_counts.append(word_count)\n",
        "\n",
        "    return word_counts\n",
        "\n",
        "# Menggunakan jalur file yang diberikan\n",
        "file_path = '/content/output_ayat.srt'\n",
        "word_counts = count_words_in_srt(file_path)\n",
        "\n",
        "# Menghapus angka 0 dari output\n",
        "word_counts = [count for count in word_counts if count != 0]\n",
        "\n",
        "# Mengganti angka pertama hasil penghitungan dengan angka 0\n",
        "if word_counts:\n",
        "    word_counts[0] = 0\n",
        "\n",
        "# Menggabungkan hasil penghitungan kata menjadi satu string\n",
        "result = ', '.join(map(str, word_counts))\n",
        "\n",
        "# Menampilkan hasil di output cell\n",
        "print(result)\n",
        "\n",
        "# Membuat elemen HTML dengan tombol salin\n",
        "from IPython.display import HTML, display\n",
        "\n",
        "display(HTML(f\"\"\"\n",
        "<textarea id=\"result\" style=\"display:none;\">{result}</textarea>\n",
        "<button onclick=\"copyToClipboard()\">Copy</button>\n",
        "<p id=\"confirmation\" style=\"color: green;\"></p>\n",
        "<script>\n",
        "function copyToClipboard() {{\n",
        "  var copyText = document.getElementById(\"result\");\n",
        "  copyText.style.display = 'block';\n",
        "  copyText.select();\n",
        "  copyText.setSelectionRange(0, 99999); // Untuk perangkat seluler\n",
        "  document.execCommand(\"copy\");\n",
        "  copyText.style.display = 'none';\n",
        "  document.getElementById(\"confirmation\").innerText = \"Copied to clipboard\";\n",
        "}}\n",
        "</script>\n",
        "\"\"\"))"
      ],
      "metadata": {
        "id": "kt-rJ_yTjGvj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 6.MENTERJEMAHKAN AYAT QURAN TO INDONESIAN TRANSLATE { display-mode: \"form\" }\n",
        "# @markdown Isi parameter surah, ayat dan group size input kemudian klik proses. Catatan: jika murottal tanpa ta'awudz dan basmalah maka hapus angka \"0\" dan \",\" pada awal input group size input.\n",
        "\n",
        "import requests\n",
        "\n",
        "# Define parameters\n",
        "surah_number = 0  # @param {type:\"number\"}\n",
        "ayah_start = 0  # @param {type:\"number\"}\n",
        "ayah_end = 0  # @param {type:\"number\"}\n",
        "group_sizes_input = \"4,\"  # @param {type:\"string\"}\n",
        "\n",
        "# Convert the group_sizes_input string to a list of integers\n",
        "group_sizes = [int(size.strip()) for size in group_sizes_input.split(',')]\n",
        "\n",
        "# Path to the existing SRT file\n",
        "srt_path = '/content/output_ayat.srt'\n",
        "\n",
        "# Function to fetch verses from the API\n",
        "def fetch_verses(surah, start, end, language=\"id\", translations=\"33\"):\n",
        "    verses = []\n",
        "    for ayah_number in range(start, end + 1):\n",
        "        endpoint = f\"https://api.quran.com/api/v4/verses/by_key/{surah}:{ayah_number}\"\n",
        "        params = {\n",
        "            \"language\": language,\n",
        "            \"words\": \"true\",\n",
        "            \"translations\": translations,\n",
        "            \"fields\": \"words,translation\"\n",
        "        }\n",
        "        response = requests.get(endpoint, params=params)\n",
        "        if response.status_code == 200:\n",
        "            verses.append(response.json()['verse'])\n",
        "        else:\n",
        "            print(f\"Error fetching Ayat {surah}:{ayah_number}: {response.status_code}\")\n",
        "    return verses\n",
        "\n",
        "# Function to extract translations from verses\n",
        "def extract_translations(verses):\n",
        "    translations = []\n",
        "    for ayah in verses:\n",
        "        words = ayah.get('words', [])\n",
        "        translations.extend([word['translation']['text'] for word in words if word['char_type_name'] != 'end'])\n",
        "    return translations\n",
        "\n",
        "# Function to process translations\n",
        "def process_translations(translations):\n",
        "    processed = []\n",
        "    for translation in translations:\n",
        "        if \"/\" in translation:\n",
        "            parts = translation.split('/')\n",
        "            processed.append(parts[0] + \" (\" + parts[1] + \")\")\n",
        "        else:\n",
        "            processed.append(translation)\n",
        "    return processed\n",
        "\n",
        "# Function to split translations into groups\n",
        "def split_into_groups(translations, group_sizes):\n",
        "    groups = []\n",
        "    start = 0\n",
        "    for size in group_sizes:\n",
        "        group = translations[start:start + size]\n",
        "        groups.append(' '.join(group))\n",
        "        start += size\n",
        "    return groups\n",
        "\n",
        "# Fetch the verses\n",
        "verses = fetch_verses(surah_number, ayah_start, ayah_end)\n",
        "\n",
        "# Extract translations\n",
        "translations = extract_translations(verses)\n",
        "\n",
        "# Process translations\n",
        "processed_translations = process_translations(translations)\n",
        "\n",
        "# Split translations into specified groups\n",
        "grouped_translations = split_into_groups(processed_translations, group_sizes)\n",
        "\n",
        "# Read the SRT file\n",
        "with open(srt_path, 'r', encoding='utf-8') as file:\n",
        "    srt_content = file.read()\n",
        "\n",
        "# Replace the subtitle text in the SRT file with the grouped translations\n",
        "srt_lines = srt_content.splitlines()\n",
        "subtitle_index = 0\n",
        "\n",
        "for i, line in enumerate(srt_lines):\n",
        "    if \"-->\" in line:\n",
        "        subtitle_index += 1\n",
        "        if subtitle_index <= len(grouped_translations):\n",
        "            srt_lines[i + 1] = grouped_translations[subtitle_index - 1]\n",
        "\n",
        "# Save the modified SRT content to a new file\n",
        "modified_srt_content = \"\\n\".join(srt_lines)\n",
        "with open('output_terjemahan.srt', 'w', encoding='utf-8') as file:\n",
        "    file.write(modified_srt_content)\n",
        "\n",
        "# Display the modified SRT content with a copy button\n",
        "from IPython.display import display, Javascript, HTML\n",
        "\n",
        "display(HTML('''\n",
        "    <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">{}</textarea>\n",
        "    <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "    <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
        "    <script>\n",
        "    function copyToClipboard() {{\n",
        "        var copyText = document.getElementById(\"srtContent\");\n",
        "        navigator.clipboard.writeText(copyText.value).then(function() {{\n",
        "            var copyMessage = document.getElementById(\"copyMessage\");\n",
        "            copyMessage.style.display = \"block\";\n",
        "            setTimeout(function() {{\n",
        "                copyMessage.style.display = \"none\";\n",
        "            }}, 2000);\n",
        "        }});\n",
        "    }}\n",
        "    </script>\n",
        "'''.format(modified_srt_content)))"
      ],
      "metadata": {
        "id": "BkfCrnJz7nI9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title 7.MENTERJEMAHKAN AYAT QURAN TO ENGLISH TRANSLATE { display-mode: \"form\" }\n",
        "# @markdown Isi parameter surah, ayat dan pattern kemudian klik proses. Catatan: jika murottal tanpa ta'awudz dan basmalah maka hapus angka \"0\" dan \",\" pada awal input pattern.\n",
        "\n",
        "import requests\n",
        "from IPython.display import display, HTML, Javascript\n",
        "\n",
        "# Function to get word by word translation from Quran API in Indonesian\n",
        "def get_word_by_word_translation(surah, ayah):\n",
        "    url = f\"https://api.quran.com/api/v4/verses/by_key/{surah}:{ayah}?words=true&word_translation_language=id&word_fields=text_uthmani,translation\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "\n",
        "    words = data['verse']['words']\n",
        "    translation_list = []\n",
        "\n",
        "    exclude_words = {'٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'}\n",
        "\n",
        "    for word in words:\n",
        "        if word['text_uthmani'] not in exclude_words:\n",
        "            translation_list.append(word['translation']['text'])\n",
        "\n",
        "    return translation_list\n",
        "\n",
        "# Function to get translations for a range of ayahs\n",
        "def get_translations_for_range(surah, ayah_start, ayah_end):\n",
        "    all_translations = []\n",
        "\n",
        "    for ayah in range(ayah_start, ayah_end + 1):\n",
        "        translations = get_word_by_word_translation(surah, ayah)\n",
        "        all_translations.extend(translations)\n",
        "\n",
        "    return all_translations\n",
        "\n",
        "# Function to group translations based on the specified pattern\n",
        "def group_translations(translations, pattern):\n",
        "    grouped_translations = []\n",
        "    index = 0\n",
        "\n",
        "    for count in pattern:\n",
        "        if index + count <= len(translations):\n",
        "            grouped_translations.append(' '.join(translations[index:index + count]))\n",
        "            index += count\n",
        "\n",
        "    return grouped_translations\n",
        "\n",
        "# @markdown **Parameter Surah dan Ayat**\n",
        "surah_number = 0 # @param {type:\"integer\"}\n",
        "ayah_start = 0 # @param {type:\"integer\"}\n",
        "ayah_end = 0 # @param {type:\"integer\"}\n",
        "pattern = \"4,\" # @param {type:\"string\"}\n",
        "\n",
        "# Convert pattern from string to list of integers\n",
        "pattern = [int(x.strip()) for x in pattern.split(',')]\n",
        "\n",
        "# Get translations\n",
        "all_translations = get_translations_for_range(surah_number, ayah_start, ayah_end)\n",
        "\n",
        "# Group translations\n",
        "grouped_translations = group_translations(all_translations, pattern)\n",
        "\n",
        "# Path to the SRT file\n",
        "srt_path = '/content/output_ayat.srt'\n",
        "\n",
        "# Read the SRT file\n",
        "with open(srt_path, 'r', encoding='utf-8') as f:\n",
        "    srt_content = f.read()\n",
        "\n",
        "# Split SRT file into parts\n",
        "srt_parts = srt_content.split('\\n\\n')\n",
        "\n",
        "# Replace text in SRT file with grouped translations\n",
        "for i, part in enumerate(srt_parts):\n",
        "    if i < len(grouped_translations):\n",
        "        lines = part.split('\\n')\n",
        "        if len(lines) > 2:\n",
        "            lines[2] = grouped_translations[i]\n",
        "            srt_parts[i] = '\\n'.join(lines)\n",
        "\n",
        "# Combine parts back into a single string\n",
        "new_srt_content = '\\n\\n'.join(srt_parts)\n",
        "\n",
        "# Save the new SRT content to a file\n",
        "new_srt_path = '/content/output_terjemahan.srt'\n",
        "with open(new_srt_path, 'w', encoding='utf-8') as f:\n",
        "    f.write(new_srt_content)\n",
        "\n",
        "# Display the updated SRT content and the copy button\n",
        "display(HTML(f\"\"\"\n",
        "<textarea id=\"srtContent\" style=\"width:100%; height:400px;\">{new_srt_content}</textarea>\n",
        "<br>\n",
        "<button onclick=\"copyToClipboard()\">Copy</button>\n",
        "<p id=\"copyMessage\" style=\"display:none; color:green;\">Teks telah disalin ke clipboard!</p>\n",
        "<script>\n",
        "function copyToClipboard() {{\n",
        "    var copyText = document.getElementById(\"srtContent\").value;\n",
        "    navigator.clipboard.writeText(copyText).then(function() {{\n",
        "        document.getElementById(\"copyMessage\").style.display = \"block\";\n",
        "    }});\n",
        "}}\n",
        "</script>\n",
        "\"\"\"))"
      ],
      "metadata": {
        "id": "dJOnhA3mDSHt"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}