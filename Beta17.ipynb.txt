{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dickymiswardi/videomurottal/blob/main/Beta17.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tutorial: YouTube.com"
      ],
      "metadata": {
        "id": "8Z2QyLOrxeTW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Download font: https://s.id/hafsfont"
      ],
      "metadata": {
        "id": "DV5nvkgnxzX8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Download VN Video Editor: https://s.id/vlognow"
      ],
      "metadata": {
        "id": "kLS0CKpYx0vB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 1. INSTALL WHISPER FOR TEKS QURAN VIDEO MUROTTAL BY DICKY MISWARDI { display-mode: \"form\" }\n",
        "# @markdown Klik untuk menginstal.\n",
        "\n",
        "from tqdm.notebook import tqdm\n",
        "import subprocess\n",
        "import time\n",
        "\n",
        "# Daftar perintah instalasi\n",
        "commands = [\n",
        "    (\"Menginstal tqdm\", ['pip', 'install', 'tqdm']),\n",
        "    (\"Menginstal whisper\", ['pip', 'install', 'git+https://github.com/openai/whisper.git']),\n",
        "    (\"Memperbarui apt\", ['sudo', 'apt', 'update']),\n",
        "    (\"Menginstal ffmpeg\", ['sudo', 'apt', 'install', 'ffmpeg', '-y']),\n",
        "    (\"Menginstal requests\", ['pip', 'install', 'requests']),\n",
        "    (\"Menginstal ipywidgets\", ['pip', 'install', 'ipywidgets'])\n",
        "]\n",
        "\n",
        "# Total jumlah perintah\n",
        "total_commands = len(commands)\n",
        "\n",
        "# Progress bar\n",
        "with tqdm(total=100, desc=\"Proses Instalasi\", bar_format=\"{l_bar}{bar} [ {elapsed} < {remaining} ]\") as pbar:\n",
        "    for idx, (description, command) in enumerate(commands):\n",
        "        print(description)\n",
        "        subprocess.run(command)\n",
        "        # Update progress bar sesuai dengan persentase selesai\n",
        "        pbar.update(100 / total_commands)\n",
        "        time.sleep(1)  # Simulasi waktu proses jika diperlukan"
      ],
      "metadata": {
        "id": "hRUbQ9bmZ5kR",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 1. TRANSCRIBE AUDIO { display-mode: \"form\" }\n",
        "# @markdown Klik untuk proses\n",
        "\n",
        "import whisper\n",
        "from tqdm import tqdm\n",
        "import requests\n",
        "import time\n",
        "import threading\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML\n",
        "from ipywidgets import FileUpload\n",
        "\n",
        "# Function to download the audio file with progress bar\n",
        "def download_audio(url, file_name):\n",
        "    response = requests.get(url, stream=True)\n",
        "    total_length = int(response.headers.get('content-length', 0))\n",
        "    block_size = 4096\n",
        "    progress_bar = tqdm(total=total_length, unit='iB', unit_scale=True, desc=\"Downloading\")\n",
        "\n",
        "    with open(file_name, 'wb') as file:\n",
        "        for data in response.iter_content(block_size):\n",
        "            progress_bar.update(len(data))\n",
        "            file.write(data)\n",
        "    progress_bar.close()\n",
        "    if total_length != 0 and progress_bar.n != total_length:\n",
        "        print(\"ERROR, something went wrong\")\n",
        "\n",
        "# Function to convert seconds to hh:mm:ss,ms format\n",
        "def format_time(seconds):\n",
        "    milliseconds = int((seconds - int(seconds)) * 1000)\n",
        "    seconds = int(seconds)\n",
        "    minutes, seconds = divmod(seconds, 60)\n",
        "    hours, minutes = divmod(minutes, 60)\n",
        "    return f\"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}\"\n",
        "\n",
        "# Function to transcribe audio and save as SRT with progress bar\n",
        "def transcribe_audio_to_srt(file_name, srt_file_name, gif_widget):\n",
        "    model = whisper.load_model(\"medium\")\n",
        "\n",
        "    # Load and process the audio with progress bar\n",
        "    audio = whisper.load_audio(file_name)\n",
        "    duration = audio.shape[0] / whisper.audio.SAMPLE_RATE\n",
        "\n",
        "    print(\"Transcribing audio file...\")\n",
        "    pbar = tqdm(total=100, desc=\"Transcribing\", unit=\"%\")\n",
        "\n",
        "    result = [None]  # Use list to store result in the thread\n",
        "\n",
        "    def transcribe():\n",
        "        result[0] = model.transcribe(file_name, language='ar')\n",
        "        pbar.n = 100\n",
        "        pbar.refresh()\n",
        "        pbar.close()\n",
        "        gif_widget.value = \"\"\n",
        "\n",
        "    def update_progress():\n",
        "        while pbar.n < 100:\n",
        "            time.sleep(1)\n",
        "            pbar.update(1)\n",
        "            pbar.refresh()\n",
        "\n",
        "    transcribe_thread = threading.Thread(target=transcribe)\n",
        "    progress_thread = threading.Thread(target=update_progress)\n",
        "\n",
        "    transcribe_thread.start()\n",
        "    progress_thread.start()\n",
        "\n",
        "    transcribe_thread.join()\n",
        "    progress_thread.join()\n",
        "\n",
        "    segments = result[0]['segments']\n",
        "    with open(srt_file_name, 'w') as srt_file:\n",
        "        for i, segment in enumerate(segments):\n",
        "            start_time = format_time(segment['start'])\n",
        "            end_time = format_time(segment['end'])\n",
        "            text = segment['text']\n",
        "\n",
        "            srt_file.write(f\"{i + 1}\\n\")\n",
        "            srt_file.write(f\"{start_time} --> {end_time}\\n\")\n",
        "            srt_file.write(f\"{text}\\n\\n\")\n",
        "\n",
        "    return srt_file_name\n",
        "\n",
        "# @title Input audio URL and transcribe\n",
        "\n",
        "# Text box for the audio URL\n",
        "audio_url = widgets.Text(\n",
        "    value='',\n",
        "    placeholder='Enter the URL of audio/video file',\n",
        "    description='MP3/4 URL:',\n",
        "    disabled=False\n",
        ")\n",
        "\n",
        "# File upload widget\n",
        "upload_widget = FileUpload(\n",
        "    accept='.mp3,.wav,.mp4,.m4a',  # Acceptable file formats\n",
        "    multiple=False  # Disable multiple file upload\n",
        ")\n",
        "\n",
        "# Play button to start the process\n",
        "button = widgets.Button(description=\"Start Transcribe\")\n",
        "\n",
        "# GIF widget\n",
        "gif_widget = widgets.HTML(value=\"\")\n",
        "\n",
        "def on_button_clicked(b):\n",
        "    gif_widget.value = '<img src=\"https://i.gifer.com/VAyR.gif\" alt=\"Processing...\" style=\"width:50px;height:50px;\">'\n",
        "    srt_file_name = \"output_subtitles.srt\"\n",
        "\n",
        "    if audio_url.value:\n",
        "        file_name = \"audio_to_transcribe.mp3\"\n",
        "        # Download the audio file\n",
        "        print(\"Downloading audio file...\")\n",
        "        download_audio(audio_url.value, file_name)\n",
        "    elif upload_widget.value:\n",
        "        upload_content = list(upload_widget.value.values())[0]\n",
        "        file_name = upload_content['metadata']['name']\n",
        "        with open(file_name, 'wb') as f:\n",
        "            f.write(upload_content['content'])\n",
        "        print(\"Audio file uploaded...\")\n",
        "    else:\n",
        "        print(\"No audio source provided.\")\n",
        "        return\n",
        "\n",
        "    # Transcribe the audio file and save as SRT\n",
        "    srt_file = transcribe_audio_to_srt(file_name, srt_file_name, gif_widget)\n",
        "    print(f\"Transcription complete! SRT file saved as {srt_file}\")\n",
        "\n",
        "    # Notify that all processes are complete\n",
        "    print(\"Proses selesai!\")\n",
        "\n",
        "button.on_click(on_button_clicked)\n",
        "\n",
        "display(audio_url)\n",
        "display(upload_widget)\n",
        "display(button)\n",
        "display(widgets.HTML(\"<br>\"))  # Add a line break after the button\n",
        "display(gif_widget)"
      ],
      "metadata": {
        "id": "ftdTKP4ON7H3",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#@title 2. MENGELUARKAN AYAT QURAN RASM UTSMANI { display-mode: \"form\" }\n",
        "#@markdown Klik untuk memproses\n",
        "\n",
        "import re\n",
        "import pandas as pd\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML, clear_output\n",
        "\n",
        "# Fungsi untuk memparsing file SRT\n",
        "def parse_srt(filename):\n",
        "    with open(filename, 'r', encoding='utf-8') as file:\n",
        "        content = file.read()\n",
        "    # Split by double newlines to separate each subtitle block\n",
        "    blocks = content.split('\\n\\n')\n",
        "    subtitles = []\n",
        "    for block in blocks:\n",
        "        lines = block.split('\\n')\n",
        "        if len(lines) >= 3:\n",
        "            # The subtitle timing is in the second line, and the text is in the following lines\n",
        "            text = ' '.join(lines[2:])\n",
        "            # Remove any HTML tags or special characters\n",
        "            text = re.sub(r'<.*?>', '', text)\n",
        "            # Remove non-alphanumeric characters except spaces\n",
        "            text = re.sub(r'[^\\w\\s]', '', text)\n",
        "            subtitles.append(text)\n",
        "    return subtitles\n",
        "\n",
        "# Fungsi untuk menghitung jumlah kata\n",
        "def count_words(text):\n",
        "    # Split the text into words\n",
        "    words = text.split()\n",
        "    return len(words)\n",
        "\n",
        "# Fungsi untuk menghitung jumlah kata dari setiap subtitle\n",
        "def calculate_word_counts(subtitles):\n",
        "    word_counts = []\n",
        "    for text in subtitles:\n",
        "        word_count = count_words(text)\n",
        "        word_counts.append(word_count)\n",
        "    return word_counts\n",
        "\n",
        "#@title Contoh penggunaan\n",
        "#@markdown\n",
        "\n",
        "filename = '/content/output_subtitles.srt'\n",
        "subtitles = parse_srt(filename)\n",
        "word_counts = calculate_word_counts(subtitles)\n",
        "\n",
        "# Mengonversi hasil word_counts ke format string yang diperlukan\n",
        "word_counts_str = ', '.join(map(str, word_counts))\n",
        "\n",
        "# Fungsi untuk mengambil ayat Quran Rasm Utsmani\n",
        "def get_quran_ayats(surah_number, from_ayat, to_ayat, splits):\n",
        "    combined_text = \"\"\n",
        "    arabic_numerals = [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"]\n",
        "\n",
        "    def convert_to_arabic_number(num):\n",
        "        reversed_num = str(num)[::-1]\n",
        "        return ''.join(arabic_numerals[int(digit)] for digit in reversed_num)\n",
        "\n",
        "    def split_text(text, splits):\n",
        "        words = text.split()\n",
        "        result = []\n",
        "        index = 0\n",
        "        for count in splits:\n",
        "            segment = ' '.join(words[index:index + count])\n",
        "            result.append(segment)\n",
        "            index += count\n",
        "        return '\\n\\n'.join(result)\n",
        "\n",
        "    for ayat_number in range(from_ayat, to_ayat + 1):\n",
        "        url = f\"https://api.quran.com/api/v4/quran/verses/uthmani?verse_key={surah_number}:{ayat_number}\"\n",
        "        response = requests.get(url)\n",
        "        if response.status_code == 200:\n",
        "            data = response.json()\n",
        "            ayat_text = data['verses'][0]['text_uthmani']\n",
        "            ayat_text = ayat_text.replace(\"ْ\", \"ۡ\").replace(\"أُو۟\", \"أُوْ\").replace(\"ا۟\", \"اْ\").replace(\"لَـَٔا\", \"لَأٓ\").replace(\"لۡـَٔا\", \"لۡأٓ\").replace(\"لِيَسُـۥٓـُٔ\", \"لِيَسُـُٔ\").replace(\"۞\", \"\")\n",
        "            ayat_text += convert_to_arabic_number(ayat_number)\n",
        "            combined_text += \" \" + ayat_text\n",
        "\n",
        "    combined_text = combined_text.replace(\" ۖ\", \"ۖ\").replace(\" ۚ\", \"ۚ\").replace(\" ۗ\", \"ۗ\").replace(\" ۛ\", \"ۛ\").replace(\" ۙ\", \"ۙ\").replace(\" ۘ\", \"ۘ\").replace(\" ۜ\", \"ۜ\").replace(\" ۩\", \"۩\").strip()\n",
        "    result_text = split_text(combined_text, splits)\n",
        "\n",
        "    return result_text\n",
        "\n",
        "# Fungsi untuk menggantikan teks dalam file SRT\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    output_srt_file = 'output_ayat.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)\n",
        "\n",
        "# Fungsi untuk mengambil data surah dan ayat dari API\n",
        "def fetch_surah_ayah_data():\n",
        "    surah_response = requests.get(\"https://api.quran.com/api/v4/chapters\")\n",
        "    if surah_response.status_code == 200:\n",
        "        surah_data = surah_response.json()\n",
        "        surah_list = [(surah[\"id\"], surah[\"name_simple\"]) for surah in surah_data[\"chapters\"]]\n",
        "        return surah_list\n",
        "    else:\n",
        "        print(\"Error fetching surah data\")\n",
        "        return []\n",
        "\n",
        "# Fungsi untuk menampilkan widget parameter surah dan ayat\n",
        "def show_parameters():\n",
        "    surah_list = fetch_surah_ayah_data()\n",
        "    surah_options = [(f\"{surah_name} ({surah_id})\", surah_id) for surah_id, surah_name in surah_list]\n",
        "\n",
        "    surah_number_widget = widgets.Dropdown(options=surah_options, description='Surah:')\n",
        "    from_ayat_widget = widgets.Dropdown(description='From Ayat:', options=[1], disabled=True)\n",
        "    to_ayat_widget = widgets.Dropdown(description='To Ayat:', options=[1], disabled=True)\n",
        "    process_button = widgets.Button(description=\"Proses\")\n",
        "    gif_output = widgets.Output()\n",
        "\n",
        "    def update_ayat_widgets(change):\n",
        "        surah_id = change.new\n",
        "        ayah_response = requests.get(f\"https://api.quran.com/api/v4/chapters/{surah_id}\")\n",
        "        if ayah_response.status_code == 200:\n",
        "            ayah_data = ayah_response.json()\n",
        "            total_ayahs = ayah_data[\"chapter\"][\"verses_count\"]\n",
        "            ayat_options = list(range(1, total_ayahs + 1))\n",
        "            from_ayat_widget.options = ayat_options\n",
        "            to_ayat_widget.options = ayat_options\n",
        "            from_ayat_widget.disabled = False\n",
        "            to_ayat_widget.disabled = False\n",
        "            to_ayat_widget.value = total_ayahs\n",
        "        else:\n",
        "            print(\"Error fetching ayah data\")\n",
        "\n",
        "    surah_number_widget.observe(update_ayat_widgets, names='value')\n",
        "\n",
        "    display(surah_number_widget, from_ayat_widget, to_ayat_widget, process_button, widgets.HTML(\"<br>\"), gif_output)\n",
        "\n",
        "    def on_button_click(b):\n",
        "        with gif_output:\n",
        "            clear_output(wait=True)\n",
        "            display(HTML(\"<img src='https://i.gifer.com/ZZ5H.gif' width='50' height='50' />\"))\n",
        "        surah_number = surah_number_widget.value\n",
        "        from_ayat = from_ayat_widget.value\n",
        "        to_ayat = to_ayat_widget.value\n",
        "        splits = [int(x.strip()) for x in word_counts_str.split(',')]\n",
        "\n",
        "        ayat_texts = get_quran_ayats(surah_number, from_ayat, to_ayat, splits)\n",
        "\n",
        "        # Gantikan teks dalam file SRT\n",
        "        srt_file_path = '/content/output_subtitles.srt'\n",
        "        new_srt_content = replace_srt_text(srt_file_path, ayat_texts)\n",
        "\n",
        "        # Hapus animasi GIF dan tampilkan hasil\n",
        "        clear_output(wait=True)\n",
        "        print(new_srt_content)\n",
        "\n",
        "    process_button.on_click(on_button_click)\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "show_parameters()"
      ],
      "metadata": {
        "id": "AzzE6KL-l7hA",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 3. KOREKSI INPUTAN SPLITS SECARA BERTAHAP { display-mode: \"form\" }\n",
        "# @markdown Klik secara bertahap, setelah keluar hasil angka, copy dan paste di Splits, kemudian klik proses Splits, kemudian kembali lagi ke sini klik sampai muncul notifikasi \"Koreksi selesai!\"\n",
        "\n",
        "import re\n",
        "from IPython.display import display, HTML\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "\n",
        "def find_and_update_first_subtitle(file_path, additional_file_path):\n",
        "    arabic_digits_pattern = re.compile(r'[\\u0660-\\u0669]')\n",
        "\n",
        "    def read_srt(file_path):\n",
        "        with open(file_path, 'r', encoding='utf-8') as file:\n",
        "            return file.readlines()\n",
        "\n",
        "    lines = read_srt(file_path)\n",
        "    additional_lines = read_srt(additional_file_path)\n",
        "\n",
        "    subtitle_number = None\n",
        "    updated_lines = []\n",
        "    word_counts = []\n",
        "    line_texts = []\n",
        "    additional_texts = []\n",
        "    updates_made = False\n",
        "    extra_words = \"\"\n",
        "\n",
        "    for i, line in enumerate(lines):\n",
        "        if line.strip().isdigit():\n",
        "            subtitle_number = line.strip()\n",
        "        if '-->' in line:\n",
        "            updated_lines.append(line.strip())\n",
        "            continue\n",
        "\n",
        "        words = line.split()\n",
        "        arabic_number_words = [word for word in words if arabic_digits_pattern.search(word)]\n",
        "\n",
        "        if len(arabic_number_words) == 1 and not updates_made:\n",
        "            word_with_arabic_number = arabic_number_words[0]\n",
        "            index = words.index(word_with_arabic_number)\n",
        "            if index != len(words) - 1:\n",
        "                # Separate the extra words\n",
        "                updated_words = words[:index + 1]\n",
        "                extra_words = ' '.join(words[index + 1:])\n",
        "\n",
        "                # Calculate new word count\n",
        "                word_counts.append(len(updated_words))\n",
        "                line_texts.append(' '.join(updated_words))\n",
        "\n",
        "                # Add the updated line\n",
        "                updated_lines.append(' '.join(updated_words))\n",
        "\n",
        "                updates_made = True\n",
        "                print(f\"Koreksi jumlah kata di baris {subtitle_number}!\")\n",
        "                print(f\"Kata: {word_with_arabic_number}\")\n",
        "                print(f\"Jumlah asli: {len(words)}, Jumlah baru: {len(updated_words)}\")\n",
        "                print(f\"Updated line: {' '.join(updated_words)}\")\n",
        "                continue\n",
        "        updated_lines.append(line.strip())\n",
        "        if line.strip() and not line.strip().isdigit() and '-->' not in line:\n",
        "            word_counts.append(len(words))\n",
        "            line_texts.append(line.strip())\n",
        "\n",
        "    # Append the remaining lines and add extra words to the next text line\n",
        "    if updates_made:\n",
        "        appended = False\n",
        "        for j in range(i + 1, len(lines)):\n",
        "            if lines[j].strip().isdigit():\n",
        "                updated_lines.append(lines[j].strip())\n",
        "            elif '-->' in lines[j]:\n",
        "                updated_lines.append(lines[j].strip())\n",
        "            elif lines[j].strip() and not appended:\n",
        "                # Append extra words to the next text line\n",
        "                combined_line = lines[j].strip() + ' ' + extra_words\n",
        "                updated_lines.append(combined_line)\n",
        "                word_counts.append(len(lines[j].split()) + len(extra_words.split()))\n",
        "                line_texts.append(combined_line)\n",
        "                appended = True\n",
        "            else:\n",
        "                updated_lines.append(lines[j].strip())\n",
        "                if lines[j].strip() and not lines[j].strip().isdigit() and '-->' not in lines[j]:\n",
        "                    word_counts.append(len(lines[j].split()))\n",
        "                    line_texts.append(lines[j].strip())\n",
        "\n",
        "    # Remove the last element if it is 0\n",
        "    if word_counts and word_counts[-1] == 0:\n",
        "        word_counts.pop()\n",
        "        line_texts.pop()\n",
        "\n",
        "    if not updates_made:\n",
        "        print(\"Koreksi selesai!\")\n",
        "    else:\n",
        "        # Write the updated lines back to the file or to a new file\n",
        "        with open('/content/output_ayat.srt', 'w', encoding='utf-8') as file:\n",
        "            for line in updated_lines:\n",
        "                file.write(line + '\\n')\n",
        "\n",
        "    # Read additional SRT lines and align them with the main SRT lines\n",
        "    additional_index = 0\n",
        "    for line in additional_lines:\n",
        "        if line.strip() and not line.strip().isdigit() and '-->' not in line:\n",
        "            additional_texts.append(line.strip())\n",
        "            additional_index += 1\n",
        "\n",
        "    # Ensure the additional_texts list is the same length as the line_texts list\n",
        "    while len(additional_texts) < len(line_texts):\n",
        "        additional_texts.append(\"\")\n",
        "\n",
        "    # Create a table with the word counts and texts from both files\n",
        "    table_rows = \"\"\n",
        "    for idx, (count, text, additional_text) in enumerate(zip(word_counts, line_texts, additional_texts), start=1):\n",
        "        table_rows += f\"<tr><td>{idx}</td><td contenteditable='true'>{count}</td><td contenteditable='true'>{text}</td><td contenteditable='true'>{additional_text}</td></tr>\"\n",
        "\n",
        "    display(HTML(f\"\"\"\n",
        "        <p>Urutan kata SRT terupdate:</p>\n",
        "        <table border=\"1\" style=\"width:100%; border-collapse: collapse;\" id=\"editable_table\">\n",
        "            <thead>\n",
        "                <tr><th>No</th><th>Word Count</th><th>Main Text</th><th>Original Subtitles</th></tr>\n",
        "            </thead>\n",
        "            <tbody>\n",
        "                {table_rows}\n",
        "            </tbody>\n",
        "        </table>\n",
        "        <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "        <p id=\"copy_status\"></p>\n",
        "        <script>\n",
        "        // Save changes to localStorage\n",
        "        function saveTableToLocalStorage() {{\n",
        "            var table = document.getElementById('editable_table');\n",
        "            var rows = Array.from(table.rows).slice(1); // skip header row\n",
        "            var tableData = rows.map(row => {{\n",
        "                return {{\n",
        "                    no: row.cells[0].innerText,\n",
        "                    wordCount: row.cells[1].innerText,\n",
        "                    mainText: row.cells[2].innerText,\n",
        "                    originalText: row.cells[3].innerText\n",
        "                }};\n",
        "            }});\n",
        "            localStorage.setItem('tableData', JSON.stringify(tableData));\n",
        "        }}\n",
        "\n",
        "        // Load changes from localStorage\n",
        "        function loadTableFromLocalStorage() {{\n",
        "            var tableData = JSON.parse(localStorage.getItem('tableData') || '[]');\n",
        "            var table = document.getElementById('editable_table').getElementsByTagName('tbody')[0];\n",
        "            tableData.forEach(data => {{\n",
        "                var row = table.insertRow();\n",
        "                row.insertCell(0).innerText = data.no;\n",
        "                row.insertCell(1).innerText = data.wordCount;\n",
        "                row.insertCell(2).innerText = data.mainText;\n",
        "                row.insertCell(3).innerText = data.originalText;\n",
        "            }});\n",
        "        }}\n",
        "\n",
        "        // Copy to clipboard\n",
        "        function copyToClipboard() {{\n",
        "            saveTableToLocalStorage();\n",
        "            var tableData = JSON.parse(localStorage.getItem('tableData') || '[]');\n",
        "            var text = tableData.map(data => data.wordCount).join(', ');\n",
        "            navigator.clipboard.writeText(text).then(function() {{\n",
        "                var copyStatus = document.getElementById(\"copy_status\");\n",
        "                copyStatus.innerText = \"Copied to clipboard! Silahkan paste ke inputan Splits\";\n",
        "            }});\n",
        "        }}\n",
        "\n",
        "        document.addEventListener('DOMContentLoaded', loadTableFromLocalStorage);\n",
        "        document.getElementById('editable_table').addEventListener('input', saveTableToLocalStorage);\n",
        "        </script>\n",
        "    \"\"\"))\n",
        "\n",
        "    return\n",
        "\n",
        "# Paths to your SRT files\n",
        "srt_file_path = '/content/output_ayat.srt'\n",
        "additional_srt_file_path = '/content/output_subtitles.srt'\n",
        "find_and_update_first_subtitle(srt_file_path, additional_srt_file_path)\n",
        "\n",
        "# @title 2. MENGELUARKAN AYAT QURAN RASM UTSMANI { display-mode: \"form\" }\n",
        "# @markdown Isi parameter surah, ayat dan split kemudian klik proses.\n",
        "\n",
        "# Fungsi untuk mengambil data surah dan ayat dari API\n",
        "def fetch_surah_ayah_data():\n",
        "    surah_response = requests.get(\"https://api.quran.com/api/v4/chapters\")\n",
        "    if surah_response.status_code == 200:\n",
        "        surah_data = surah_response.json()\n",
        "        surah_list = [(surah[\"id\"], surah[\"name_simple\"]) for surah in surah_data[\"chapters\"]]\n",
        "        return surah_list\n",
        "    else:\n",
        "        print(\"Error fetching surah data\")\n",
        "        return []\n",
        "\n",
        "# Input widgets untuk bagian kedua\n",
        "surah_list = fetch_surah_ayah_data()\n",
        "surah_options = [(f\"{surah_name} ({surah_id})\", surah_id) for surah_id, surah_name in surah_list]\n",
        "\n",
        "surah_number_widget = widgets.Dropdown(options=surah_options, description='Surah:')\n",
        "from_ayat_widget = widgets.Dropdown(description='From Ayat:', options=[1], disabled=True)\n",
        "to_ayat_widget = widgets.Dropdown(description='To Ayat:', options=[1], disabled=True)\n",
        "splits_input = widgets.Text(description='Splits:', value='4, 10, 9, 9, 7, 10, 11, 9, 8, 13, 13, 9, 11, 14, 10, 5, 7, 7, 8, 10, 8, 8, 7, 5, 5, 8, 3, 11, 11, 7, 13, 6, 6')\n",
        "process_button = widgets.Button(description=\"Proses\")\n",
        "\n",
        "def update_ayat_widgets(change):\n",
        "    surah_id = change.new\n",
        "    ayah_response = requests.get(f\"https://api.quran.com/api/v4/chapters/{surah_id}\")\n",
        "    if ayah_response.status_code == 200:\n",
        "        ayah_data = ayah_response.json()\n",
        "        total_ayahs = ayah_data[\"chapter\"][\"verses_count\"]\n",
        "        ayat_options = list(range(1, total_ayahs + 1))\n",
        "        from_ayat_widget.options = ayat_options\n",
        "        to_ayat_widget.options = ayat_options\n",
        "        from_ayat_widget.disabled = False\n",
        "        to_ayat_widget.disabled = False\n",
        "        to_ayat_widget.value = total_ayahs\n",
        "    else:\n",
        "        print(\"Error fetching ayah data\")\n",
        "\n",
        "surah_number_widget.observe(update_ayat_widgets, names='value')\n",
        "\n",
        "def run_kode_kedua(surah_number, from_ayat, to_ayat, splits):\n",
        "    splits = [int(x.strip()) for x in splits.split(',')]\n",
        "    ayat_texts = get_quran_ayats(surah_number, from_ayat, to_ayat, splits)\n",
        "\n",
        "    # Gantikan teks dalam file SRT\n",
        "    srt_file_path = '/content/output_subtitles.srt'\n",
        "    new_srt_content = replace_srt_text(srt_file_path, ayat_texts)\n",
        "\n",
        "    # Tambahkan tombol Copy dan notifikasi\n",
        "    def on_copy_button_clicked(b):\n",
        "        js = f\"navigator.clipboard.writeText(`{new_srt_content}`)\"\n",
        "        display(HTML(f\"<script>{js}</script>\"))\n",
        "        copy_label.value = \"Teks berhasil dicopy!\"\n",
        "\n",
        "    copy_button = widgets.Button(description=\"Copy\")\n",
        "    copy_button.on_click(on_copy_button_clicked)\n",
        "\n",
        "    copy_label = widgets.Label(value=\"\")\n",
        "\n",
        "    # Cetak hasil file SRT baru di papan layar\n",
        "    print(new_srt_content)\n",
        "    display(copy_button, copy_label)\n",
        "\n",
        "def on_confirm_button_clicked(b):\n",
        "    run_kode_kedua(surah_number_widget.value, from_ayat_widget.value, to_ayat_widget.value, splits_input.value)\n",
        "\n",
        "confirm_button = widgets.Button(description=\"Run Kode Kedua\")\n",
        "confirm_button.on_click(on_confirm_button_clicked)\n",
        "\n",
        "display(surah_number_widget, from_ayat_widget, to_ayat_widget, splits_input, confirm_button)\n",
        "\n",
        "# Bagian kode kedua\n",
        "def get_quran_ayats(surah_number, from_ayat, to_ayat, splits):\n",
        "    combined_text = \"\"\n",
        "    arabic_numerals = [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"]\n",
        "\n",
        "    def convert_to_arabic_number(num):\n",
        "        reversed_num = str(num)[::-1]  # Membalik urutan angka\n",
        "        return ''.join(arabic_numerals[int(digit)] for digit in reversed_num)\n",
        "\n",
        "    def split_text(text, splits):\n",
        "        words = text.split()\n",
        "        result = []\n",
        "        index = 0\n",
        "        for count in splits:\n",
        "            segment = ' '.join(words[index:index + count])\n",
        "            result.append(segment)\n",
        "            index += count\n",
        "        return '\\n\\n'.join(result)  # Menggunakan dua enter untuk jarak antar segmen\n",
        "\n",
        "    for ayat_number in range(from_ayat, to_ayat + 1):\n",
        "        url = f\"https://api.quran.com/api/v4/quran/verses/uthmani?verse_key={surah_number}:{ayat_number}\"\n",
        "        response = requests.get(url)\n",
        "        if response.status_code == 200:\n",
        "            data = response.json()\n",
        "            ayat_text = data['verses'][0]['text_uthmani']\n",
        "            ayat_text = ayat_text.replace(\"ْ\", \"ۡ\")\n",
        "            ayat_text = ayat_text.replace(\"أُو۟\", \"أُوْ\")\n",
        "            ayat_text = ayat_text.replace(\"ا۟\", \"اْ\")\n",
        "            ayat_text = ayat_text.replace(\"لَـَٔا\", \"لَأٓ\")\n",
        "            ayat_text = ayat_text.replace(\"لۡـَٔا\", \"لۡأٓ\")\n",
        "            ayat_text = ayat_text.replace(\"لِيَسُـۥٓـُٔ\", \"لِيَسُـُٔ\")\n",
        "            ayat_text = ayat_text.replace(\"۞\", \"\")  # Hapus tanda ۞\n",
        "            ayat_text += convert_to_arabic_number(ayat_number)\n",
        "            combined_text += \" \" + ayat_text\n",
        "\n",
        "    # Menggabungkan kata yang diakhiri dengan \"ۖ\", \"ۚ\", \"ۗ\", \"ۛ\", \"ۙ\", \"ۘ\", \"ۜ\", dan \"۩\" dengan kata sebelumnya\n",
        "    combined_text = combined_text.replace(\" ۖ\", \"ۖ\").replace(\" ۚ\", \"ۚ\").replace(\" ۗ\", \"ۗ\").replace(\" ۛ\", \"ۛ\").replace(\" ۙ\", \"ۙ\").replace(\" ۘ\", \"ۘ\").replace(\" ۜ\", \"ۜ\").replace(\" ۩\", \"۩\")\n",
        "\n",
        "    combined_text = combined_text.strip()\n",
        "    result_text = split_text(combined_text, splits)\n",
        "\n",
        "    return result_text\n",
        "\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    output_srt_file = 'output_ayat.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)"
      ],
      "metadata": {
        "id": "dnDSZm03cdn1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 4. MENTERJEMAHKAN AYAT QURAN TO INDONESIAN TRANSLATE { display-mode: \"form\" }\n",
        "# @markdown Isi parameter surah, ayat dan group size input kemudian klik proses. Catatan: jika murottal tanpa ta'awudz dan basmalah maka hapus angka \"0\" dan \",\" pada awal input group size input.\n",
        "\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML, clear_output\n",
        "\n",
        "# Fungsi untuk mengambil data surah dan ayat dari API\n",
        "def fetch_surah_ayah_data():\n",
        "    surah_response = requests.get(\"https://api.quran.com/api/v4/chapters\")\n",
        "    if surah_response.status_code == 200:\n",
        "        surah_data = surah_response.json()\n",
        "        surah_list = [(surah[\"id\"], surah[\"name_simple\"]) for surah in surah_data[\"chapters\"]]\n",
        "        return surah_list\n",
        "    else:\n",
        "        print(\"Error fetching surah data\")\n",
        "        return []\n",
        "\n",
        "# Fungsi untuk mengambil ayat dari API\n",
        "def fetch_verses(surah, start, end, language=\"id\", translations=\"33\"):\n",
        "    verses = []\n",
        "    for ayah_number in range(start, end + 1):\n",
        "        endpoint = f\"https://api.quran.com/api/v4/verses/by_key/{surah}:{ayah_number}\"\n",
        "        params = {\n",
        "            \"language\": language,\n",
        "            \"words\": \"true\",\n",
        "            \"translations\": translations,\n",
        "            \"fields\": \"words,translation\"\n",
        "        }\n",
        "        response = requests.get(endpoint, params=params)\n",
        "        if response.status_code == 200:\n",
        "            verses.append(response.json()['verse'])\n",
        "        else:\n",
        "            print(f\"Error fetching Ayat {surah}:{ayah_number}: {response.status_code}\")\n",
        "    return verses\n",
        "\n",
        "# Fungsi untuk ekstraksi terjemahan dari ayat\n",
        "def extract_translations(verses):\n",
        "    translations = []\n",
        "    for ayah in verses:\n",
        "        words = ayah.get('words', [])\n",
        "        translations.extend([word['translation']['text'] for word in words if word['char_type_name'] != 'end'])\n",
        "    return translations\n",
        "\n",
        "# Fungsi untuk memproses terjemahan\n",
        "def process_translations(translations):\n",
        "    processed = []\n",
        "    for translation in translations:\n",
        "        if \"/\" in translation:\n",
        "            parts = translation.split('/')\n",
        "            processed.append(parts[0] + \" (\" + parts[1] + \")\")\n",
        "        else:\n",
        "            processed.append(translation)\n",
        "    return processed\n",
        "\n",
        "# Fungsi untuk membagi terjemahan ke dalam grup\n",
        "def split_into_groups(translations, group_sizes):\n",
        "    groups = []\n",
        "    start = 0\n",
        "    for size in group_sizes:\n",
        "        group = translations[start:start + size]\n",
        "        groups.append(' '.join(group))\n",
        "        start += size\n",
        "    return groups\n",
        "\n",
        "# Fungsi untuk menggantikan teks dalam file SRT\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    output_srt_file = 'output_terjemahan.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)\n",
        "\n",
        "# Fungsi untuk menampilkan widget parameter surah dan ayat\n",
        "def show_parameters():\n",
        "    surah_list = fetch_surah_ayah_data()\n",
        "    surah_options = [(f\"{surah_name} ({surah_id})\", surah_id) for surah_id, surah_name in surah_list]\n",
        "\n",
        "    surah_number_widget = widgets.Dropdown(options=surah_options, description='Surah:')\n",
        "    from_ayat_widget = widgets.Dropdown(description='From Ayat:', options=[1], disabled=True)\n",
        "    to_ayat_widget = widgets.Dropdown(description='To Ayat:', options=[1], disabled=True)\n",
        "    group_sizes_input = widgets.Text(description='Group Sizes:', value='0, 0, 0')\n",
        "    process_button = widgets.Button(description=\"Proses\")\n",
        "    gif_output = widgets.Output()\n",
        "\n",
        "    def update_ayat_widgets(change):\n",
        "        surah_id = change.new\n",
        "        ayah_response = requests.get(f\"https://api.quran.com/api/v4/chapters/{surah_id}\")\n",
        "        if ayah_response.status_code == 200:\n",
        "            ayah_data = ayah_response.json()\n",
        "            total_ayahs = ayah_data[\"chapter\"][\"verses_count\"]\n",
        "            ayat_options = list(range(1, total_ayahs + 1))\n",
        "            from_ayat_widget.options = ayat_options\n",
        "            to_ayat_widget.options = ayat_options\n",
        "            from_ayat_widget.disabled = False\n",
        "            to_ayat_widget.disabled = False\n",
        "            to_ayat_widget.value = total_ayahs\n",
        "        else:\n",
        "            print(\"Error fetching ayah data\")\n",
        "\n",
        "    surah_number_widget.observe(update_ayat_widgets, names='value')\n",
        "\n",
        "    display(surah_number_widget, from_ayat_widget, to_ayat_widget, group_sizes_input, process_button, widgets.HTML(\"<br>\"), gif_output)\n",
        "\n",
        "    def on_button_click(b):\n",
        "        with gif_output:\n",
        "            clear_output(wait=True)\n",
        "            display(HTML(\"<img src='https://i.gifer.com/ZZ5H.gif' width='50' height='50' />\"))\n",
        "\n",
        "        surah_number = surah_number_widget.value\n",
        "        from_ayat = from_ayat_widget.value\n",
        "        to_ayat = to_ayat_widget.value\n",
        "        group_sizes = [int(size.strip()) for size in group_sizes_input.value.split(',')]\n",
        "\n",
        "        # Fetch the verses\n",
        "        verses = fetch_verses(surah_number, from_ayat, to_ayat)\n",
        "\n",
        "        # Extract translations\n",
        "        translations = extract_translations(verses)\n",
        "\n",
        "        # Process translations\n",
        "        processed_translations = process_translations(translations)\n",
        "\n",
        "        # Split translations into specified groups\n",
        "        grouped_translations = split_into_groups(processed_translations, group_sizes)\n",
        "\n",
        "        # Read the SRT file\n",
        "        srt_path = '/content/output_ayat.srt'\n",
        "        new_srt_content = replace_srt_text(srt_path, '\\n\\n'.join(grouped_translations))\n",
        "\n",
        "        # Display the modified SRT content with a copy button\n",
        "        display(HTML(f'''\n",
        "            <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">{new_srt_content}</textarea>\n",
        "            <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "            <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
        "            <script>\n",
        "            function copyToClipboard() {{\n",
        "                var copyText = document.getElementById(\"srtContent\");\n",
        "                navigator.clipboard.writeText(copyText.value).then(function() {{\n",
        "                    var copyMessage = document.getElementById(\"copyMessage\");\n",
        "                    copyMessage.style.display = \"block\";\n",
        "                    setTimeout(function() {{\n",
        "                        copyMessage.style.display = \"none\";\n",
        "                    }}, 2000);\n",
        "                }});\n",
        "            }}\n",
        "            </script>\n",
        "        '''))\n",
        "\n",
        "    process_button.on_click(on_button_click)\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "show_parameters()"
      ],
      "metadata": {
        "id": "BkfCrnJz7nI9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title 6. MENGHITUNG JUMLAH KATA UNTUK TRANSLATE { display-mode: \"form\" }\n",
        "# @markdown Klik untuk menghasilkan kode \"Group Size Input\" pada box \"Indonesian Translate\" dan kode \"Pattern\" pada box \"English Translate.\"\n",
        "\n",
        "def count_words_in_srt(file_path):\n",
        "    with open(file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    word_counts = []\n",
        "    is_subtitle_text = False\n",
        "\n",
        "    for line in lines:\n",
        "        cleaned_line = line.strip()\n",
        "\n",
        "        # Memeriksa apakah baris ini merupakan durasi\n",
        "        if \"-->\" in cleaned_line:\n",
        "            is_subtitle_text = True\n",
        "            continue\n",
        "\n",
        "        # Mengabaikan baris nomor urut\n",
        "        if cleaned_line.isdigit():\n",
        "            is_subtitle_text = False\n",
        "            continue\n",
        "\n",
        "        # Menghitung kata hanya pada baris teks subtitle\n",
        "        if is_subtitle_text and cleaned_line:\n",
        "            word_count = len(cleaned_line.split())\n",
        "            word_counts.append(word_count)\n",
        "\n",
        "    return word_counts\n",
        "\n",
        "# Menggunakan jalur file yang diberikan\n",
        "file_path = '/content/output_ayat.srt'\n",
        "word_counts = count_words_in_srt(file_path)\n",
        "\n",
        "# Menghapus angka 0 dari output\n",
        "word_counts = [count for count in word_counts if count != 0]\n",
        "\n",
        "# Mengganti angka pertama hasil penghitungan dengan angka 0\n",
        "if word_counts:\n",
        "    word_counts[0] = 0\n",
        "\n",
        "# Menggabungkan hasil penghitungan kata menjadi satu string\n",
        "result = ', '.join(map(str, word_counts))\n",
        "\n",
        "# Menampilkan hasil di output cell\n",
        "print(result)\n",
        "\n",
        "# Membuat elemen HTML dengan tombol salin\n",
        "from IPython.display import HTML, display\n",
        "\n",
        "display(HTML(f\"\"\"\n",
        "<textarea id=\"result\" style=\"display:none;\">{result}</textarea>\n",
        "<button onclick=\"copyToClipboard()\">Copy</button>\n",
        "<p id=\"confirmation\" style=\"color: green;\"></p>\n",
        "<script>\n",
        "function copyToClipboard() {{\n",
        "  var copyText = document.getElementById(\"result\");\n",
        "  copyText.style.display = 'block';\n",
        "  copyText.select();\n",
        "  copyText.setSelectionRange(0, 99999); // Untuk perangkat seluler\n",
        "  document.execCommand(\"copy\");\n",
        "  copyText.style.display = 'none';\n",
        "  document.getElementById(\"confirmation\").innerText = \"Copied to clipboard! Silahkan paste ke Group Size Input dan Pattern pada Translate!\";\n",
        "}}\n",
        "</script>\n",
        "\"\"\"))"
      ],
      "metadata": {
        "id": "kt-rJ_yTjGvj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Modify SRT File with Quran Translations { display-mode: \"form\" }\n",
        "# @markdown This script modifies an existing SRT file by replacing the subtitle text with Quran translations.\n",
        "\n",
        "import requests\n",
        "\n",
        "# Define parameters\n",
        "surah_number = 72  # @param {type:\"number\"}\n",
        "ayah_start = 1  # @param {type:\"number\"}\n",
        "ayah_end = 28  # @param {type:\"number\"}\n",
        "group_sizes_input = \"4, 10, 9, 9, 7, 10, 11, 9, 8, 13, 13, 9, 11, 14, 10, 5, 7, 7, 8, 10, 8, 8, 7, 5, 5, 8, 3, 11, 11, 7, 13, 6, 6\"  # @param {type:\"string\"}\n",
        "\n",
        "# Convert the group_sizes_input string to a list of integers\n",
        "group_sizes = [int(size.strip()) for size in group_sizes_input.split(',')]\n",
        "\n",
        "# Path to the existing SRT file\n",
        "srt_path = '/content/output_ayat.srt'\n",
        "\n",
        "# Function to fetch verses from the API\n",
        "def fetch_verses(surah, start, end, language=\"en\", translations=\"131\"):  # Updated language and translation ID\n",
        "    verses = []\n",
        "    for ayah_number in range(start, end + 1):\n",
        "        endpoint = f\"https://api.quran.com/api/v4/verses/by_key/{surah}:{ayah_number}\"\n",
        "        params = {\n",
        "            \"language\": language,\n",
        "            \"words\": \"true\",\n",
        "            \"translations\": translations,\n",
        "            \"fields\": \"words,translation\"\n",
        "        }\n",
        "        response = requests.get(endpoint, params=params)\n",
        "        if response.status_code == 200:\n",
        "            verses.append(response.json()['verse'])\n",
        "        else:\n",
        "            print(f\"Error fetching Ayat {surah}:{ayah_number}: {response.status_code}\")\n",
        "    return verses\n",
        "\n",
        "# Function to extract translations from verses\n",
        "def extract_translations(verses):\n",
        "    translations = []\n",
        "    for ayah in verses:\n",
        "        words = ayah.get('words', [])\n",
        "        translations.extend([word['translation']['text'] for word in words if word['char_type_name'] != 'end'])\n",
        "    return translations\n",
        "\n",
        "# Function to split translations into groups\n",
        "def split_into_groups(translations, group_sizes):\n",
        "    groups = []\n",
        "    start = 0\n",
        "    for size in group_sizes:\n",
        "        group = translations[start:start + size]\n",
        "        groups.append(' '.join(group))\n",
        "        start += size\n",
        "    return groups\n",
        "\n",
        "# Fetch the verses\n",
        "verses = fetch_verses(surah_number, ayah_start, ayah_end)\n",
        "\n",
        "# Extract translations\n",
        "translations = extract_translations(verses)\n",
        "\n",
        "# Split translations into specified groups\n",
        "grouped_translations = split_into_groups(translations, group_sizes)\n",
        "\n",
        "# Read the SRT file\n",
        "with open(srt_path, 'r', encoding='utf-8') as file:\n",
        "    srt_content = file.read()\n",
        "\n",
        "# Replace the subtitle text in the SRT file with the grouped translations\n",
        "srt_lines = srt_content.splitlines()\n",
        "subtitle_index = 0\n",
        "\n",
        "for i, line in enumerate(srt_lines):\n",
        "    if \"-->\" in line:\n",
        "        subtitle_index += 1\n",
        "        if subtitle_index <= len(grouped_translations):\n",
        "            srt_lines[i + 1] = grouped_translations[subtitle_index - 1]\n",
        "\n",
        "# Save the modified SRT content to a new file\n",
        "modified_srt_content = \"\\n\".join(srt_lines)\n",
        "with open('output_terjemahan.srt', 'w', encoding='utf-8') as file:\n",
        "    file.write(modified_srt_content)\n",
        "\n",
        "# Display the modified SRT content with a copy button\n",
        "from IPython.display import display, Javascript, HTML\n",
        "\n",
        "display(HTML('''\n",
        "    <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">{}</textarea>\n",
        "    <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "    <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
        "    <script>\n",
        "    function copyToClipboard() {{\n",
        "        var copyText = document.getElementById(\"srtContent\");\n",
        "        navigator.clipboard.writeText(copyText.value).then(function() {{\n",
        "            var copyMessage = document.getElementById(\"copyMessage\");\n",
        "            copyMessage.style.display = \"block\";\n",
        "            setTimeout(function() {{\n",
        "                copyMessage.style.display = \"none\";\n",
        "            }}, 2000);\n",
        "        }});\n",
        "    }}\n",
        "    </script>\n",
        "'''.format(modified_srt_content)))"
      ],
      "metadata": {
        "id": "IuKy7TTwnKxS"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}