{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "ea7d18a7ab7b471187ae39b25703d310": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_479cbf97a0d943fdb35604f311f50b9b",
              "IPY_MODEL_d56c77b0f912441ea2f956731f2697dd",
              "IPY_MODEL_395d1bdd7e784068b9a2f3f473af3142"
            ],
            "layout": "IPY_MODEL_8925ba5f1c8a49c8b8f6507020fc006a"
          }
        },
        "479cbf97a0d943fdb35604f311f50b9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1e19c65ef4ad4fe9bea5c848eca093d0",
            "placeholder": "​",
            "style": "IPY_MODEL_1eda39f1c1a844c8bd433744b3a27c90",
            "value": "Proses Instalasi: 100%"
          }
        },
        "d56c77b0f912441ea2f956731f2697dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c1d15e60f478443999e37acb8148ddf2",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b96f8f733a464d228cf60f46a642fd47",
            "value": 100
          }
        },
        "395d1bdd7e784068b9a2f3f473af3142": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f8e722a5b3d1486998d1f72b4e34a8fe",
            "placeholder": "​",
            "style": "IPY_MODEL_271e77db771840ed97cee22079d11c0a",
            "value": " [ 00:42 &lt; 00:00 ]"
          }
        },
        "8925ba5f1c8a49c8b8f6507020fc006a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1e19c65ef4ad4fe9bea5c848eca093d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1eda39f1c1a844c8bd433744b3a27c90": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c1d15e60f478443999e37acb8148ddf2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b96f8f733a464d228cf60f46a642fd47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f8e722a5b3d1486998d1f72b4e34a8fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "271e77db771840ed97cee22079d11c0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "622e2f67f66c47c9814a90484ed9eb87": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "MP3/4 URL:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_aa939caaee574218ad314a2c712d484d",
            "placeholder": "Enter the URL of audio/video file",
            "style": "IPY_MODEL_ea220cb2a7c74cb4904950eb04a51558",
            "value": ""
          }
        },
        "aa939caaee574218ad314a2c712d484d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ea220cb2a7c74cb4904950eb04a51558": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b43cdceb7d95448ba6d3315f31619ddb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FileUploadModel",
          "model_module_version": "1.5.0",
          "state": {
            "_counter": 1,
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FileUploadModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FileUploadView",
            "accept": ".mp3,.wav,.mp4,.m4a",
            "button_style": "",
            "data": [
              null
            ],
            "description": "Upload",
            "description_tooltip": null,
            "disabled": false,
            "error": "",
            "icon": "upload",
            "layout": "IPY_MODEL_dae872b371c1423eb17ec8065d3cac85",
            "metadata": [
              {
                "name": "Recording 125739-072024.mp3",
                "type": "audio/mpeg",
                "size": 1889302,
                "lastModified": 1721455178027
              }
            ],
            "multiple": false,
            "style": "IPY_MODEL_8f444a8f09504c33a8790744fddc3e7c"
          }
        },
        "dae872b371c1423eb17ec8065d3cac85": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8f444a8f09504c33a8790744fddc3e7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "4bc91d59973042e4b1b18c765fba4433": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Start Transcribe",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_4a52b4205dcb499eb8f275559d083bb7",
            "style": "IPY_MODEL_7ea305238eaf428eb733be18c9a74bc0",
            "tooltip": ""
          }
        },
        "4a52b4205dcb499eb8f275559d083bb7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7ea305238eaf428eb733be18c9a74bc0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "f70b5ebc1b3d4bf6aa4f7df2d62574cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7bbad8bd362a4bca91d1bc0d2078eea2",
            "placeholder": "​",
            "style": "IPY_MODEL_ea42e8a8d3664f69aa2a83183e7c17c6",
            "value": "<br>"
          }
        },
        "7bbad8bd362a4bca91d1bc0d2078eea2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ea42e8a8d3664f69aa2a83183e7c17c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f13b14fd168b406191a0f3f5859d9e41": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_65056a0659254adb81a1cc81ae514e57",
            "placeholder": "​",
            "style": "IPY_MODEL_e45a2ab554f442538f8a238718749fc5",
            "value": ""
          }
        },
        "65056a0659254adb81a1cc81ae514e57": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e45a2ab554f442538f8a238718749fc5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d1f7bbd76dae4de3adc276752de38706": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_00cf18023f7146649e08fe1bac194ea7",
            "msg_id": "",
            "outputs": []
          }
        },
        "00cf18023f7146649e08fe1bac194ea7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6a369c6998ff4cd18801174d33565a0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Al-Fatihah (1)",
              "Al-Baqarah (2)",
              "Ali 'Imran (3)",
              "An-Nisa (4)",
              "Al-Ma'idah (5)",
              "Al-An'am (6)",
              "Al-A'raf (7)",
              "Al-Anfal (8)",
              "At-Tawbah (9)",
              "Yunus (10)",
              "Hud (11)",
              "Yusuf (12)",
              "Ar-Ra'd (13)",
              "Ibrahim (14)",
              "Al-Hijr (15)",
              "An-Nahl (16)",
              "Al-Isra (17)",
              "Al-Kahf (18)",
              "Maryam (19)",
              "Taha (20)",
              "Al-Anbya (21)",
              "Al-Hajj (22)",
              "Al-Mu'minun (23)",
              "An-Nur (24)",
              "Al-Furqan (25)",
              "Ash-Shu'ara (26)",
              "An-Naml (27)",
              "Al-Qasas (28)",
              "Al-'Ankabut (29)",
              "Ar-Rum (30)",
              "Luqman (31)",
              "As-Sajdah (32)",
              "Al-Ahzab (33)",
              "Saba (34)",
              "Fatir (35)",
              "Ya-Sin (36)",
              "As-Saffat (37)",
              "Sad (38)",
              "Az-Zumar (39)",
              "Ghafir (40)",
              "Fussilat (41)",
              "Ash-Shuraa (42)",
              "Az-Zukhruf (43)",
              "Ad-Dukhan (44)",
              "Al-Jathiyah (45)",
              "Al-Ahqaf (46)",
              "Muhammad (47)",
              "Al-Fath (48)",
              "Al-Hujurat (49)",
              "Qaf (50)",
              "Adh-Dhariyat (51)",
              "At-Tur (52)",
              "An-Najm (53)",
              "Al-Qamar (54)",
              "Ar-Rahman (55)",
              "Al-Waqi'ah (56)",
              "Al-Hadid (57)",
              "Al-Mujadila (58)",
              "Al-Hashr (59)",
              "Al-Mumtahanah (60)",
              "As-Saf (61)",
              "Al-Jumu'ah (62)",
              "Al-Munafiqun (63)",
              "At-Taghabun (64)",
              "At-Talaq (65)",
              "At-Tahrim (66)",
              "Al-Mulk (67)",
              "Al-Qalam (68)",
              "Al-Haqqah (69)",
              "Al-Ma'arij (70)",
              "Nuh (71)",
              "Al-Jinn (72)",
              "Al-Muzzammil (73)",
              "Al-Muddaththir (74)",
              "Al-Qiyamah (75)",
              "Al-Insan (76)",
              "Al-Mursalat (77)",
              "An-Naba (78)",
              "An-Nazi'at (79)",
              "'Abasa (80)",
              "At-Takwir (81)",
              "Al-Infitar (82)",
              "Al-Mutaffifin (83)",
              "Al-Inshiqaq (84)",
              "Al-Buruj (85)",
              "At-Tariq (86)",
              "Al-A'la (87)",
              "Al-Ghashiyah (88)",
              "Al-Fajr (89)",
              "Al-Balad (90)",
              "Ash-Shams (91)",
              "Al-Layl (92)",
              "Ad-Duhaa (93)",
              "Ash-Sharh (94)",
              "At-Tin (95)",
              "Al-'Alaq (96)",
              "Al-Qadr (97)",
              "Al-Bayyinah (98)",
              "Az-Zalzalah (99)",
              "Al-'Adiyat (100)",
              "Al-Qari'ah (101)",
              "At-Takathur (102)",
              "Al-'Asr (103)",
              "Al-Humazah (104)",
              "Al-Fil (105)",
              "Quraysh (106)",
              "Al-Ma'un (107)",
              "Al-Kawthar (108)",
              "Al-Kafirun (109)",
              "An-Nasr (110)",
              "Al-Masad (111)",
              "Al-Ikhlas (112)",
              "Al-Falaq (113)",
              "An-Nas (114)"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Surah:",
            "description_tooltip": null,
            "disabled": false,
            "index": 50,
            "layout": "IPY_MODEL_1e8e746b2e2949f8a5471087c78460be",
            "style": "IPY_MODEL_acbf0e16e89c404a97dde66ac15d180c"
          }
        },
        "1e8e746b2e2949f8a5471087c78460be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "acbf0e16e89c404a97dde66ac15d180c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5b29b941c0964780bd6376a0db677deb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "From Ayat:",
            "description_tooltip": null,
            "disabled": false,
            "index": 46,
            "layout": "IPY_MODEL_f1d92e00576a42b38ad6e6c371bbc21b",
            "style": "IPY_MODEL_085581be0e964993b8149de05bfb3c68"
          }
        },
        "f1d92e00576a42b38ad6e6c371bbc21b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "085581be0e964993b8149de05bfb3c68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9ad6bf9d32984f7eaf0ee7b6a6fbbd7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "To Ayat:",
            "description_tooltip": null,
            "disabled": false,
            "index": 59,
            "layout": "IPY_MODEL_614c9208228a4fed96a555ad9e1b8a3e",
            "style": "IPY_MODEL_9966fc02203b4d1b8bf9f260a2bbd732"
          }
        },
        "614c9208228a4fed96a555ad9e1b8a3e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9966fc02203b4d1b8bf9f260a2bbd732": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2d7fd64627d149aba70d65c379cb2a93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Proses",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_16b1128275d84e1584bee2ed54449d5e",
            "style": "IPY_MODEL_93cec654ffdc4df6a4782541727caafc",
            "tooltip": ""
          }
        },
        "16b1128275d84e1584bee2ed54449d5e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "93cec654ffdc4df6a4782541727caafc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "fef8b45642694e10965b840fee65a353": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_db9b459db07941aea36214039c9eda0e",
            "placeholder": "​",
            "style": "IPY_MODEL_c3ddcad578be442f8e807d9d541e9152",
            "value": "<br>"
          }
        },
        "db9b459db07941aea36214039c9eda0e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c3ddcad578be442f8e807d9d541e9152": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5249ac4a2d3743f58a4438166cfb4d2b": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_461941f0e96b426b979d57628c4b1bc5",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<IPython.core.display.HTML object>",
                  "text/html": "<img src='https://i.gifer.com/ZZ5H.gif' width='50' height='50' />"
                },
                "metadata": {}
              }
            ]
          }
        },
        "461941f0e96b426b979d57628c4b1bc5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dickymiswardi/videomurottal/blob/main/Beta24.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 1. INSTALL WHISPER FOR TEKS QURAN VIDEO MUROTTAL BY DICKY MISWARDI { display-mode: \"form\" }\n",
        "# @markdown Klik untuk menginstal.\n",
        "\n",
        "from tqdm.notebook import tqdm\n",
        "import subprocess\n",
        "import time\n",
        "\n",
        "# Daftar perintah instalasi\n",
        "commands = [\n",
        "    (\"Menginstal tqdm\", ['pip', 'install', 'tqdm']),\n",
        "    (\"Menginstal whisper\", ['pip', 'install', 'git+https://github.com/openai/whisper.git']),\n",
        "    (\"Memperbarui apt\", ['sudo', 'apt', 'update']),\n",
        "    (\"Menginstal ffmpeg\", ['sudo', 'apt', 'install', 'ffmpeg', '-y']),\n",
        "    (\"Menginstal requests\", ['pip', 'install', 'requests']),\n",
        "    (\"Menginstal ipywidgets\", ['pip', 'install', 'ipywidgets'])\n",
        "]\n",
        "\n",
        "# Total jumlah perintah\n",
        "total_commands = len(commands)\n",
        "\n",
        "# Progress bar\n",
        "with tqdm(total=100, desc=\"Proses Instalasi\", bar_format=\"{l_bar}{bar} [ {elapsed} < {remaining} ]\") as pbar:\n",
        "    for idx, (description, command) in enumerate(commands):\n",
        "        print(description)\n",
        "        subprocess.run(command)\n",
        "        # Update progress bar sesuai dengan persentase selesai\n",
        "        pbar.update(100 / total_commands)\n",
        "        time.sleep(1)  # Simulasi waktu proses jika diperlukan\n",
        "\n",
        "# Pesan setelah proses instalasi selesai\n",
        "print(\"\\nPeralatan lainnya:\")\n",
        "print(\"1. Tutorial: YouTube.com\")\n",
        "print(\"2. Download font teks Qur'an: https://s.id/hafsfont\")\n",
        "print(\"3. Download VN Video Editor: https://s.id/vlognow\")"
      ],
      "metadata": {
        "id": "hRUbQ9bmZ5kR",
        "collapsed": true,
        "outputId": "1fccc904-3fa2-4129-f462-5bf025d9fa6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260,
          "referenced_widgets": [
            "ea7d18a7ab7b471187ae39b25703d310",
            "479cbf97a0d943fdb35604f311f50b9b",
            "d56c77b0f912441ea2f956731f2697dd",
            "395d1bdd7e784068b9a2f3f473af3142",
            "8925ba5f1c8a49c8b8f6507020fc006a",
            "1e19c65ef4ad4fe9bea5c848eca093d0",
            "1eda39f1c1a844c8bd433744b3a27c90",
            "c1d15e60f478443999e37acb8148ddf2",
            "b96f8f733a464d228cf60f46a642fd47",
            "f8e722a5b3d1486998d1f72b4e34a8fe",
            "271e77db771840ed97cee22079d11c0a"
          ]
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Proses Instalasi:   0%|           [ 00:00 < ? ]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ea7d18a7ab7b471187ae39b25703d310"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Menginstal tqdm\n",
            "Menginstal whisper\n",
            "Memperbarui apt\n",
            "Menginstal ffmpeg\n",
            "Menginstal requests\n",
            "Menginstal ipywidgets\n",
            "\n",
            "Peralatan lainnya:\n",
            "1. Tutorial: YouTube.com\n",
            "2. Download font teks Qur'an: https://s.id/hafsfont\n",
            "3. Download VN Video Editor: https://s.id/vlognow\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 1. TRANSCRIBE AUDIO { display-mode: \"form\" }\n",
        "# @markdown Klik untuk proses\n",
        "\n",
        "import whisper\n",
        "from tqdm import tqdm\n",
        "import requests\n",
        "import time\n",
        "import threading\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML\n",
        "from ipywidgets import FileUpload\n",
        "\n",
        "# Function to download the audio file with progress bar\n",
        "def download_audio(url, file_name):\n",
        "    response = requests.get(url, stream=True)\n",
        "    total_length = int(response.headers.get('content-length', 0))\n",
        "    block_size = 4096\n",
        "    progress_bar = tqdm(total=total_length, unit='iB', unit_scale=True, desc=\"Downloading\")\n",
        "\n",
        "    with open(file_name, 'wb') as file:\n",
        "        for data in response.iter_content(block_size):\n",
        "            progress_bar.update(len(data))\n",
        "            file.write(data)\n",
        "    progress_bar.close()\n",
        "    if total_length != 0 and progress_bar.n != total_length:\n",
        "        print(\"ERROR, something went wrong\")\n",
        "\n",
        "# Function to convert seconds to hh:mm:ss,ms format\n",
        "def format_time(seconds):\n",
        "    milliseconds = int((seconds - int(seconds)) * 1000)\n",
        "    seconds = int(seconds)\n",
        "    minutes, seconds = divmod(seconds, 60)\n",
        "    hours, minutes = divmod(minutes, 60)\n",
        "    return f\"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}\"\n",
        "\n",
        "# Function to transcribe audio and save as SRT with progress bar\n",
        "def transcribe_audio_to_srt(file_name, srt_file_name, gif_widget):\n",
        "    model = whisper.load_model(\"medium\")\n",
        "\n",
        "    # Load and process the audio with progress bar\n",
        "    audio = whisper.load_audio(file_name)\n",
        "    duration = audio.shape[0] / whisper.audio.SAMPLE_RATE\n",
        "\n",
        "    print(\"Transcribing audio file...\")\n",
        "    pbar = tqdm(total=100, desc=\"Transcribing\", unit=\"%\")\n",
        "\n",
        "    result = [None]  # Use list to store result in the thread\n",
        "\n",
        "    def transcribe():\n",
        "        result[0] = model.transcribe(file_name, language='ar')\n",
        "        pbar.n = 100\n",
        "        pbar.refresh()\n",
        "        pbar.close()\n",
        "        gif_widget.value = \"\"\n",
        "\n",
        "    def update_progress():\n",
        "        while pbar.n < 100:\n",
        "            time.sleep(1)\n",
        "            pbar.update(1)\n",
        "            pbar.refresh()\n",
        "\n",
        "    transcribe_thread = threading.Thread(target=transcribe)\n",
        "    progress_thread = threading.Thread(target=update_progress)\n",
        "\n",
        "    transcribe_thread.start()\n",
        "    progress_thread.start()\n",
        "\n",
        "    transcribe_thread.join()\n",
        "    progress_thread.join()\n",
        "\n",
        "    segments = result[0]['segments']\n",
        "    with open(srt_file_name, 'w') as srt_file:\n",
        "        for i, segment in enumerate(segments):\n",
        "            start_time = format_time(segment['start'])\n",
        "            end_time = format_time(segment['end'])\n",
        "            text = segment['text']\n",
        "\n",
        "            srt_file.write(f\"{i + 1}\\n\")\n",
        "            srt_file.write(f\"{start_time} --> {end_time}\\n\")\n",
        "            srt_file.write(f\"{text}\\n\\n\")\n",
        "\n",
        "    return srt_file_name\n",
        "\n",
        "# @title Input audio URL and transcribe\n",
        "\n",
        "# Text box for the audio URL\n",
        "audio_url = widgets.Text(\n",
        "    value='',\n",
        "    placeholder='Enter the URL of audio/video file',\n",
        "    description='MP3/4 URL:',\n",
        "    disabled=False\n",
        ")\n",
        "\n",
        "# File upload widget\n",
        "upload_widget = FileUpload(\n",
        "    accept='.mp3,.wav,.mp4,.m4a',  # Acceptable file formats\n",
        "    multiple=False  # Disable multiple file upload\n",
        ")\n",
        "\n",
        "# Play button to start the process\n",
        "button = widgets.Button(description=\"Start Transcribe\")\n",
        "\n",
        "# GIF widget\n",
        "gif_widget = widgets.HTML(value=\"\")\n",
        "\n",
        "def on_button_clicked(b):\n",
        "    gif_widget.value = '<img src=\"https://i.gifer.com/VAyR.gif\" alt=\"Processing...\" style=\"width:50px;height:50px;\">'\n",
        "    srt_file_name = \"output_subtitles.srt\"\n",
        "\n",
        "    if audio_url.value:\n",
        "        file_name = \"audio_to_transcribe.mp3\"\n",
        "        # Download the audio file\n",
        "        print(\"Downloading audio file...\")\n",
        "        download_audio(audio_url.value, file_name)\n",
        "    elif upload_widget.value:\n",
        "        upload_content = list(upload_widget.value.values())[0]\n",
        "        file_name = upload_content['metadata']['name']\n",
        "        with open(file_name, 'wb') as f:\n",
        "            f.write(upload_content['content'])\n",
        "        print(\"Audio file uploaded...\")\n",
        "    else:\n",
        "        print(\"No audio source provided.\")\n",
        "        return\n",
        "\n",
        "    # Transcribe the audio file and save as SRT\n",
        "    srt_file = transcribe_audio_to_srt(file_name, srt_file_name, gif_widget)\n",
        "    print(f\"Transcription complete! SRT file saved as {srt_file}\")\n",
        "\n",
        "    # Notify that all processes are complete\n",
        "    print(\"Proses selesai!\")\n",
        "\n",
        "button.on_click(on_button_clicked)\n",
        "\n",
        "display(audio_url)\n",
        "display(upload_widget)\n",
        "display(button)\n",
        "display(widgets.HTML(\"<br>\"))  # Add a line break after the button\n",
        "display(gif_widget)"
      ],
      "metadata": {
        "id": "ftdTKP4ON7H3",
        "collapsed": true,
        "outputId": "8d6eab42-c3b5-4431-ee87-1b72fd1124ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254,
          "referenced_widgets": [
            "622e2f67f66c47c9814a90484ed9eb87",
            "aa939caaee574218ad314a2c712d484d",
            "ea220cb2a7c74cb4904950eb04a51558",
            "b43cdceb7d95448ba6d3315f31619ddb",
            "dae872b371c1423eb17ec8065d3cac85",
            "8f444a8f09504c33a8790744fddc3e7c",
            "4bc91d59973042e4b1b18c765fba4433",
            "4a52b4205dcb499eb8f275559d083bb7",
            "7ea305238eaf428eb733be18c9a74bc0",
            "f70b5ebc1b3d4bf6aa4f7df2d62574cf",
            "7bbad8bd362a4bca91d1bc0d2078eea2",
            "ea42e8a8d3664f69aa2a83183e7c17c6",
            "f13b14fd168b406191a0f3f5859d9e41",
            "65056a0659254adb81a1cc81ae514e57",
            "e45a2ab554f442538f8a238718749fc5"
          ]
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Text(value='', description='MP3/4 URL:', placeholder='Enter the URL of audio/video file')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "622e2f67f66c47c9814a90484ed9eb87"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FileUpload(value={}, accept='.mp3,.wav,.mp4,.m4a', description='Upload')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b43cdceb7d95448ba6d3315f31619ddb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(description='Start Transcribe', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "4bc91d59973042e4b1b18c765fba4433"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HTML(value='<br>')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f70b5ebc1b3d4bf6aa4f7df2d62574cf"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HTML(value='')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f13b14fd168b406191a0f3f5859d9e41"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Audio file uploaded...\n",
            "Transcribing audio file...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Transcribing: 100%|██████████| 100/100 [00:15<00:00,  6.58%/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Transcription complete! SRT file saved as output_subtitles.srt\n",
            "Proses selesai!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#@title 1. MENGELUARKAN AYAT QURAN RASM UTSMANI { display-mode: \"form\" }\n",
        "#@markdown Klik untuk memproses\n",
        "\n",
        "import re\n",
        "import pandas as pd\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML, clear_output\n",
        "\n",
        "# Variabel global untuk menyimpan pilihan\n",
        "selected_surah = None\n",
        "selected_from_ayat = None\n",
        "selected_to_ayat = None\n",
        "\n",
        "# Fungsi untuk memparsing file SRT\n",
        "def parse_srt(filename):\n",
        "    with open(filename, 'r', encoding='utf-8') as file:\n",
        "        content = file.read()\n",
        "    # Split by double newlines to separate each subtitle block\n",
        "    blocks = content.split('\\n\\n')\n",
        "    subtitles = []\n",
        "    for block in blocks:\n",
        "        lines = block.split('\\n')\n",
        "        if len(lines) >= 3:\n",
        "            # The subtitle timing is in the second line, and the text is in the following lines\n",
        "            text = ' '.join(lines[2:])\n",
        "            # Remove any HTML tags or special characters\n",
        "            text = re.sub(r'<.*?>', '', text)\n",
        "            # Remove non-alphanumeric characters except spaces\n",
        "            text = re.sub(r'[^\\w\\s]', '', text)\n",
        "            subtitles.append(text)\n",
        "    return subtitles\n",
        "\n",
        "# Fungsi untuk menghitung jumlah kata\n",
        "def count_words(text):\n",
        "    # Split the text into words\n",
        "    words = text.split()\n",
        "    return len(words)\n",
        "\n",
        "# Fungsi untuk menghitung jumlah kata dari setiap subtitle\n",
        "def calculate_word_counts(subtitles):\n",
        "    word_counts = []\n",
        "    for text in subtitles:\n",
        "        word_count = count_words(text)\n",
        "        word_counts.append(word_count)\n",
        "    return word_counts\n",
        "\n",
        "#@title Contoh penggunaan\n",
        "#@markdown\n",
        "\n",
        "filename = '/content/output_subtitles.srt'\n",
        "subtitles = parse_srt(filename)\n",
        "word_counts = calculate_word_counts(subtitles)\n",
        "\n",
        "# Mengonversi hasil word_counts ke format string yang diperlukan\n",
        "word_counts_str = ', '.join(map(str, word_counts))\n",
        "\n",
        "# Fungsi untuk mengambil ayat Quran Rasm Utsmani\n",
        "def get_quran_ayats(surah_number, from_ayat, to_ayat, splits):\n",
        "    combined_text = \"\"\n",
        "    arabic_numerals = [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"]\n",
        "\n",
        "    def convert_to_arabic_number(num):\n",
        "        reversed_num = str(num)[::-1]\n",
        "        return ''.join(arabic_numerals[int(digit)] for digit in reversed_num)\n",
        "\n",
        "    def split_text(text, splits):\n",
        "        words = text.split()\n",
        "        result = []\n",
        "        index = 0\n",
        "        for count in splits:\n",
        "            segment = ' '.join(words[index:index + count])\n",
        "            result.append(segment)\n",
        "            index += count\n",
        "        return '\\n\\n'.join(result)\n",
        "\n",
        "    for ayat_number in range(from_ayat, to_ayat + 1):\n",
        "        url = f\"https://api.quran.com/api/v4/quran/verses/uthmani?verse_key={surah_number}:{ayat_number}\"\n",
        "        response = requests.get(url)\n",
        "        if response.status_code == 200:\n",
        "            data = response.json()\n",
        "            ayat_text = data['verses'][0]['text_uthmani']\n",
        "            ayat_text = ayat_text.replace(\"ْ\", \"ۡ\").replace(\"أُو۟\", \"أُوْ\").replace(\"ا۟\", \"اْ\").replace(\"لَـَٔا\", \"لَأٓ\").replace(\"لۡـَٔا\", \"لۡأٓ\").replace(\"لِيَسُـۥٓـُٔ\", \"لِيَسُـُٔ\").replace(\"۞\", \"\")\n",
        "            ayat_text += convert_to_arabic_number(ayat_number)\n",
        "            combined_text += \" \" + ayat_text\n",
        "\n",
        "    combined_text = combined_text.replace(\" ۖ\", \"ۖ\").replace(\" ۚ\", \"ۚ\").replace(\" ۗ\", \"ۗ\").replace(\" ۛ\", \"ۛ\").replace(\" ۙ\", \"ۙ\").replace(\" ۘ\", \"ۘ\").replace(\" ۜ\", \"ۜ\").replace(\" ۩\", \"۩\").strip()\n",
        "    result_text = split_text(combined_text, splits)\n",
        "\n",
        "    return result_text\n",
        "\n",
        "# Fungsi untuk menggantikan teks dalam file SRT\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    output_srt_file = 'output_ayat.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)\n",
        "\n",
        "# Fungsi untuk mengambil data surah dan ayat dari API\n",
        "def fetch_surah_ayah_data():\n",
        "    surah_response = requests.get(\"https://api.quran.com/api/v4/chapters\")\n",
        "    if surah_response.status_code == 200:\n",
        "        surah_data = surah_response.json()\n",
        "        surah_list = [(surah[\"id\"], surah[\"name_simple\"]) for surah in surah_data[\"chapters\"]]\n",
        "        return surah_list\n",
        "    else:\n",
        "        print(\"Error fetching surah data\")\n",
        "        return []\n",
        "\n",
        "# Fungsi untuk menampilkan widget parameter surah dan ayat\n",
        "def show_parameters():\n",
        "    surah_list = fetch_surah_ayah_data()\n",
        "    surah_options = [(f\"{surah_name} ({surah_id})\", surah_id) for surah_id, surah_name in surah_list]\n",
        "\n",
        "    surah_number_widget = widgets.Dropdown(options=surah_options, description='Surah:')\n",
        "    from_ayat_widget = widgets.Dropdown(description='From Ayat:', options=[1], disabled=True)\n",
        "    to_ayat_widget = widgets.Dropdown(description='To Ayat:', options=[1], disabled=True)\n",
        "    process_button = widgets.Button(description=\"Proses\")\n",
        "    gif_output = widgets.Output()\n",
        "\n",
        "    def update_ayat_widgets(change):\n",
        "        surah_id = change.new\n",
        "        ayah_response = requests.get(f\"https://api.quran.com/api/v4/chapters/{surah_id}\")\n",
        "        if ayah_response.status_code == 200:\n",
        "            ayah_data = ayah_response.json()\n",
        "            total_ayahs = ayah_data[\"chapter\"][\"verses_count\"]\n",
        "            ayat_options = list(range(1, total_ayahs + 1))\n",
        "            from_ayat_widget.options = ayat_options\n",
        "            to_ayat_widget.options = ayat_options\n",
        "            from_ayat_widget.disabled = False\n",
        "            to_ayat_widget.disabled = False\n",
        "            to_ayat_widget.value = total_ayahs\n",
        "        else:\n",
        "            print(\"Error fetching ayah data\")\n",
        "\n",
        "    surah_number_widget.observe(update_ayat_widgets, names='value')\n",
        "\n",
        "    display(surah_number_widget, from_ayat_widget, to_ayat_widget, process_button, widgets.HTML(\"<br>\"), gif_output)\n",
        "\n",
        "    def on_button_click(b):\n",
        "        global selected_surah, selected_from_ayat, selected_to_ayat\n",
        "        with gif_output:\n",
        "            clear_output(wait=True)\n",
        "            display(HTML(\"<img src='https://i.gifer.com/ZZ5H.gif' width='50' height='50' />\"))\n",
        "        selected_surah = surah_number_widget.value\n",
        "        selected_from_ayat = from_ayat_widget.value\n",
        "        selected_to_ayat = to_ayat_widget.value\n",
        "        splits = [int(x.strip()) for x in word_counts_str.split(',')]\n",
        "\n",
        "        ayat_texts = get_quran_ayats(selected_surah, selected_from_ayat, selected_to_ayat, splits)\n",
        "\n",
        "        # Gantikan teks dalam file SRT\n",
        "        srt_file_path = '/content/output_subtitles.srt'\n",
        "        new_srt_content = replace_srt_text(srt_file_path, ayat_texts)\n",
        "\n",
        "        # Hapus animasi GIF dan tampilkan hasil\n",
        "        clear_output(wait=True)\n",
        "\n",
        "        # Menampilkan hasil dalam textarea\n",
        "        display(HTML(f'''\n",
        "            <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">{new_srt_content}</textarea>\n",
        "            <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "            <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
        "            <script>\n",
        "            function copyToClipboard() {{\n",
        "                var copyText = document.getElementById(\"srtContent\");\n",
        "                navigator.clipboard.writeText(copyText.value).then(function() {{\n",
        "                    var copyMessage = document.getElementById(\"copyMessage\");\n",
        "                    copyMessage.style.display = \"block\";\n",
        "                    setTimeout(function() {{\n",
        "                        copyMessage.style.display = \"none\";\n",
        "                    }}, 2000);\n",
        "                }});\n",
        "            }}\n",
        "            </script>\n",
        "        '''))\n",
        "\n",
        "    process_button.on_click(on_button_click)\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "show_parameters()"
      ],
      "metadata": {
        "id": "AzzE6KL-l7hA",
        "collapsed": true,
        "outputId": "527bbe22-4b25-45aa-8148-6a964078d32d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268,
          "referenced_widgets": [
            "d1f7bbd76dae4de3adc276752de38706",
            "00cf18023f7146649e08fe1bac194ea7",
            "6a369c6998ff4cd18801174d33565a0a",
            "1e8e746b2e2949f8a5471087c78460be",
            "acbf0e16e89c404a97dde66ac15d180c",
            "5b29b941c0964780bd6376a0db677deb",
            "f1d92e00576a42b38ad6e6c371bbc21b",
            "085581be0e964993b8149de05bfb3c68",
            "9ad6bf9d32984f7eaf0ee7b6a6fbbd7c",
            "614c9208228a4fed96a555ad9e1b8a3e",
            "9966fc02203b4d1b8bf9f260a2bbd732",
            "2d7fd64627d149aba70d65c379cb2a93",
            "16b1128275d84e1584bee2ed54449d5e",
            "93cec654ffdc4df6a4782541727caafc",
            "fef8b45642694e10965b840fee65a353",
            "db9b459db07941aea36214039c9eda0e",
            "c3ddcad578be442f8e807d9d541e9152",
            "5249ac4a2d3743f58a4438166cfb4d2b",
            "461941f0e96b426b979d57628c4b1bc5"
          ]
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "            <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">1\n",
              "00:00:00,000 --> 00:00:09,400\n",
              "وَٱلسَّمَآءَ بَنَيۡنَـٰهَا بِأَيۡي۟دٍ وَإِنَّا لَمُوسِعُونَ٧٤ وَٱلۡأَرۡضَ\n",
              "\n",
              "2\n",
              "00:00:09,400 --> 00:00:15,240\n",
              "فَرَشۡنَـٰهَا فَنِعۡمَ ٱلۡمَـٰهِدُونَ٨٤ وَمِن كُلِّ\n",
              "\n",
              "3\n",
              "00:00:15,240 --> 00:00:23,440\n",
              "شَىۡءٍ خَلَقۡنَا زَوۡجَيۡنِ لَعَلَّكُمۡ تَذَكَّرُونَ٩٤ فَفِرُّوٓاْ إِلَى ٱللَّهِۖ\n",
              "\n",
              "4\n",
              "00:00:23,920 --> 00:00:33,240\n",
              "إِنِّى لَكُم مِّنۡهُ نَذِيرٌ مُّبِينٌ٠٥ وَلَا تَجۡعَلُواْ مَعَ ٱللَّهِ\n",
              "\n",
              "5\n",
              "00:00:33,240 --> 00:00:45,200\n",
              "إِلَـٰهًا ءَاخَرَۖ إِنِّى لَكُم مِّنۡهُ نَذِيرٌ مُّبِينٌ١٥ كَذَٰلِكَ مَآ أَتَى ٱلَّذِينَ مِن\n",
              "\n",
              "6\n",
              "00:00:45,640 --> 00:00:56,440\n",
              "قَبۡلِهِم مِّن رَّسُولٍ إِلَّا قَالُواْ سَاحِرٌ أَوۡ مَجۡنُونٌ٢٥ أَتَوَاصَوۡاْ بِهِۦۚ بَلۡ هُمۡ قَوۡمٌ طَاغُونَ٣٥\n",
              "\n",
              "7\n",
              "00:00:56,440 --> 00:01:03,600\n",
              "فَتَوَلَّ عَنۡهُمۡ فَمَآ أَنتَ بِمَلُومٍ٤٥ وَذَكِّرۡ فَإِنَّ ٱلذِّكۡرَىٰ\n",
              "\n",
              "8\n",
              "00:01:03,600 --> 00:01:08,920\n",
              "تَنفَعُ ٱلۡمُؤۡمِنِينَ٥٥ وَمَا خَلَقۡتُ ٱلۡجِنَّ وَٱلۡإِنسَ\n",
              "\n",
              "9\n",
              "00:01:08,920 --> 00:01:15,439\n",
              "إِلَّا لِيَعۡبُدُونِ٦٥ مَآ أُرِيدُ مِنۡهُم مِّن\n",
              "\n",
              "10\n",
              "00:01:15,439 --> 00:01:23,680\n",
              "رِّزۡقٍ وَمَآ أُرِيدُ أَن يُطۡعِمُونِ٧٥ إِنَّ ٱللَّهَ\n",
              "\n",
              "11\n",
              "00:01:23,680 --> 00:01:31,879\n",
              "هُوَ ٱلرَّزَّاقُ ذُو ٱلۡقُوَّةِ ٱلۡمَتِينُ٨٥ فَإِنَّ لِلَّذِينَ ظَلَمُواْ ذَنُوبًا مِّثۡلَ\n",
              "\n",
              "12\n",
              "00:01:32,359 --> 00:01:39,000\n",
              "ذَنُوبِ أَصۡحَـٰبِهِمۡ فَلَا يَسۡتَعۡجِلُونِ٩٥ فَوَيۡلٌ لِّلَّذِينَ كَفَرُواْ مِن\n",
              "\n",
              "13\n",
              "00:01:39,000 --> 00:01:49,280\n",
              "يَوۡمِهِمُ ٱلَّذِى يُوعَدُونَ٠٦\n",
              "\n",
              "14\n",
              "00:01:49,280 --> 00:01:57,159\n",
              "\n",
              "\n",
              "</textarea>\n",
              "            <button onclick=\"copyToClipboard()\">Copy</button>\n",
              "            <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
              "            <script>\n",
              "            function copyToClipboard() {\n",
              "                var copyText = document.getElementById(\"srtContent\");\n",
              "                navigator.clipboard.writeText(copyText.value).then(function() {\n",
              "                    var copyMessage = document.getElementById(\"copyMessage\");\n",
              "                    copyMessage.style.display = \"block\";\n",
              "                    setTimeout(function() {\n",
              "                        copyMessage.style.display = \"none\";\n",
              "                    }, 2000);\n",
              "                });\n",
              "            }\n",
              "            </script>\n",
              "        "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 2. KOREKSI INPUTAN SPLITS SECARA BERTAHAP { display-mode: \"form\" }\n",
        "# @markdown Klik secara bertahap, setelah keluar hasil angka, copy dan paste di Splits, kemudian klik proses Splits, kemudian kembali lagi ke sini klik sampai muncul notifikasi \"Koreksi selesai!\"\n",
        "\n",
        "import re\n",
        "from IPython.display import display, HTML, clear_output\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "\n",
        "# Fungsi untuk membaca dan memperbarui subtitle pertama\n",
        "def find_and_update_first_subtitle(file_path, additional_file_path):\n",
        "    arabic_digits_pattern = re.compile(r'[\\u0660-\\u0669]')\n",
        "\n",
        "    def read_srt(file_path):\n",
        "        with open(file_path, 'r', encoding='utf-8') as file:\n",
        "            return file.readlines()\n",
        "\n",
        "    lines = read_srt(file_path)\n",
        "    additional_lines = read_srt(additional_file_path)\n",
        "\n",
        "    subtitle_number = None\n",
        "    updated_lines = []\n",
        "    word_counts = []\n",
        "    line_texts = []\n",
        "    additional_texts = []\n",
        "    updates_made = False\n",
        "    extra_words = \"\"\n",
        "\n",
        "    for i, line in enumerate(lines):\n",
        "        if line.strip().isdigit():\n",
        "            subtitle_number = line.strip()\n",
        "        if '-->' in line:\n",
        "            updated_lines.append(line.strip())\n",
        "            continue\n",
        "\n",
        "        words = line.split()\n",
        "        arabic_number_words = [word for word in words if arabic_digits_pattern.search(word)]\n",
        "\n",
        "        if len(arabic_number_words) == 1 and not updates_made:\n",
        "            word_with_arabic_number = arabic_number_words[0]\n",
        "            index = words.index(word_with_arabic_number)\n",
        "            if index != len(words) - 1:\n",
        "                updated_words = words[:index + 1]\n",
        "                extra_words = ' '.join(words[index + 1:])\n",
        "\n",
        "                word_counts.append(len(updated_words))\n",
        "                line_texts.append(' '.join(updated_words))\n",
        "\n",
        "                updated_lines.append(' '.join(updated_words))\n",
        "\n",
        "                updates_made = True\n",
        "                print(f\"Koreksi jumlah kata di baris {subtitle_number}!\")\n",
        "                print(f\"Kata: {word_with_arabic_number}\")\n",
        "                print(f\"Jumlah asli: {len(words)}, Jumlah baru: {len(updated_words)}\")\n",
        "                print(f\"Updated line: {' '.join(updated_words)}\")\n",
        "                continue\n",
        "        updated_lines.append(line.strip())\n",
        "        if line.strip() and not line.strip().isdigit() and '-->' not in line:\n",
        "            word_counts.append(len(words))\n",
        "            line_texts.append(line.strip())\n",
        "\n",
        "    if updates_made:\n",
        "        appended = False\n",
        "        for j in range(i + 1, len(lines)):\n",
        "            if lines[j].strip().isdigit():\n",
        "                updated_lines.append(lines[j].strip())\n",
        "            elif '-->' in lines[j]:\n",
        "                updated_lines.append(lines[j].strip())\n",
        "            elif lines[j].strip() and not appended:\n",
        "                combined_line = lines[j].strip() + ' ' + extra_words\n",
        "                updated_lines.append(combined_line)\n",
        "                word_counts.append(len(lines[j].split()) + len(extra_words.split()))\n",
        "                line_texts.append(combined_line)\n",
        "                appended = True\n",
        "            else:\n",
        "                updated_lines.append(lines[j].strip())\n",
        "                if lines[j].strip() and not lines[j].strip().isdigit() and '-->' not in lines[j]:\n",
        "                    word_counts.append(len(lines[j].split()))\n",
        "                    line_texts.append(lines[j].strip())\n",
        "\n",
        "    if word_counts and word_counts[-1] == 0:\n",
        "        word_counts.pop()\n",
        "        line_texts.pop()\n",
        "\n",
        "    if not updates_made:\n",
        "        print(\"Koreksi selesai!\")\n",
        "    else:\n",
        "        with open('/content/output_ayat.srt', 'w', encoding='utf-8') as file:\n",
        "            for line in updated_lines:\n",
        "                file.write(line + '\\n')\n",
        "\n",
        "    additional_index = 0\n",
        "    for line in additional_lines:\n",
        "        if line.strip() and not line.strip().isdigit() and '-->' not in line:\n",
        "            additional_texts.append(line.strip())\n",
        "            additional_index += 1\n",
        "\n",
        "    while len(additional_texts) < len(line_texts):\n",
        "        additional_texts.append(\"\")\n",
        "\n",
        "    table_rows = \"\"\n",
        "    for idx, (count, text, additional_text) in enumerate(zip(word_counts, line_texts, additional_texts), start=1):\n",
        "        table_rows += f\"<tr><td>{idx}</td><td contenteditable='true'>{count}</td><td contenteditable='true'>{text}</td><td contenteditable='true'>{additional_text}</td></tr>\"\n",
        "\n",
        "    display(HTML(f\"\"\"\n",
        "        <p>Urutan kata SRT terupdate:</p>\n",
        "        <table border=\"1\" style=\"width:100%; border-collapse: collapse;\" id=\"editable_table\">\n",
        "            <thead>\n",
        "                <tr><th>No</th><th>Word Count</th><th>Main Text</th><th>Original Subtitles</th></tr>\n",
        "            </thead>\n",
        "            <tbody>\n",
        "                {table_rows}\n",
        "            </tbody>\n",
        "        </table>\n",
        "        <button onclick=\"runKodeKedua()\">Update SRT</button>\n",
        "        <p id=\"runMessage\" style=\"display:none;color:green;\">Kode kedua berhasil dijalankan!</p>\n",
        "        <script>\n",
        "        function saveTableToLocalStorage() {{\n",
        "            var table = document.getElementById('editable_table');\n",
        "            var rows = Array.from(table.rows).slice(1);\n",
        "            var tableData = rows.map(row => {{\n",
        "                return {{\n",
        "                    no: row.cells[0].innerText,\n",
        "                    wordCount: row.cells[1].innerText,\n",
        "                    mainText: row.cells[2].innerText,\n",
        "                    originalText: row.cells[3].innerText\n",
        "                }};\n",
        "            }});\n",
        "            localStorage.setItem('tableData', JSON.stringify(tableData));\n",
        "        }}\n",
        "\n",
        "        function loadTableFromLocalStorage() {{\n",
        "            var tableData = JSON.parse(localStorage.getItem('tableData') || '[]');\n",
        "            var table = document.getElementById('editable_table').getElementsByTagName('tbody')[0];\n",
        "            tableData.forEach(data => {{\n",
        "                var row = table.insertRow();\n",
        "                row.insertCell(0).innerText = data.no;\n",
        "                row.insertCell(1).innerText = data.wordCount;\n",
        "                row.insertCell(2).innerText = data.mainText;\n",
        "                row.insertCell(3).innerText = data.originalText;\n",
        "            }});\n",
        "        }}\n",
        "\n",
        "        function runKodeKedua() {{\n",
        "            saveTableToLocalStorage();\n",
        "            var tableData = JSON.parse(localStorage.getItem('tableData') || '[]');\n",
        "            var splits = tableData.map(data => data.wordCount).join(', ');\n",
        "\n",
        "            // Panggil fungsi Python untuk menjalankan kode kedua\n",
        "            google.colab.kernel.invokeFunction('notebook.runKodeKedua', [splits], {{}});\n",
        "        }}\n",
        "\n",
        "        document.addEventListener('DOMContentLoaded', loadTableFromLocalStorage);\n",
        "        document.getElementById('editable_table').addEventListener('input', saveTableToLocalStorage);\n",
        "        </script>\n",
        "    \"\"\"))\n",
        "\n",
        "    return\n",
        "\n",
        "# Paths to your SRT files\n",
        "srt_file_path = '/content/output_ayat.srt'\n",
        "additional_srt_file_path = '/content/output_subtitles.srt'\n",
        "find_and_update_first_subtitle(srt_file_path, additional_srt_file_path)\n",
        "\n",
        "# Fungsi untuk mengambil data surah dan ayat dari API\n",
        "def fetch_surah_ayah_data():\n",
        "    surah_response = requests.get(\"https://api.quran.com/api/v4/chapters\")\n",
        "    if surah_response.status_code == 200:\n",
        "        surah_data = surah_response.json()\n",
        "        surah_list = [(surah[\"id\"], surah[\"name_simple\"]) for surah in surah_data[\"chapters\"]]\n",
        "        return surah_list\n",
        "    else:\n",
        "        print(\"Error fetching surah data\")\n",
        "        return []\n",
        "\n",
        "# Input widgets untuk bagian kedua\n",
        "surah_list = fetch_surah_ayah_data()\n",
        "process_button = widgets.Button(description=\"Proses\", layout=widgets.Layout(display='none'))  # Sembunyikan tombol\n",
        "confirm_button = widgets.Button(description=\"Update SRT\", layout=widgets.Layout(display='none'))  # Sembunyikan tombol\n",
        "textarea_output = widgets.Output()  # Output widget untuk textarea\n",
        "\n",
        "def run_kode_kedua(splits):\n",
        "    global selected_surah, selected_from_ayat, selected_to_ayat\n",
        "    splits = [int(x.strip()) for x in splits.split(',')]\n",
        "    ayat_texts = get_quran_ayats(selected_surah, selected_from_ayat, selected_to_ayat, splits)\n",
        "\n",
        "    srt_file_path = '/content/output_subtitles.srt'\n",
        "    new_srt_content = replace_srt_text(srt_file_path, ayat_texts)\n",
        "\n",
        "    def on_copy_button_clicked(b):\n",
        "        js = f\"navigator.clipboard.writeText(`{new_srt_content}`)\"\n",
        "        display(HTML(f\"<script>{js}</script>\"))\n",
        "        copy_label.value = \"Teks berhasil dicopy!\"\n",
        "\n",
        "    copy_button = widgets.Button(description=\"Copy\")\n",
        "    copy_button.on_click(on_copy_button_clicked)\n",
        "\n",
        "    copy_label = widgets.Label(value=\"\")\n",
        "\n",
        "    with textarea_output:\n",
        "        clear_output(wait=True)\n",
        "        display(HTML(f'''\n",
        "            <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">{new_srt_content}</textarea>\n",
        "            <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "            <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
        "            <script>\n",
        "            function copyToClipboard() {{\n",
        "                var copyText = document.getElementById(\"srtContent\");\n",
        "                navigator.clipboard.writeText(copyText.value).then(function() {{\n",
        "                    var copyMessage = document.getElementById(\"copyMessage\");\n",
        "                    copyMessage.style.display = \"block\";\n",
        "                    setTimeout(function() {{\n",
        "                        copyMessage.style.display = \"none\";\n",
        "                    }}, 2000);\n",
        "                }});\n",
        "            }}\n",
        "            </script>\n",
        "        '''))\n",
        "\n",
        "def on_confirm_button_clicked(splits):\n",
        "    run_kode_kedua(splits)\n",
        "\n",
        "# Fungsi untuk mengikat panggilan dari JavaScript ke Python\n",
        "from google.colab import output\n",
        "output.register_callback('notebook.runKodeKedua', on_confirm_button_clicked)\n",
        "\n",
        "confirm_button.on_click(lambda b: on_confirm_button_clicked(splits_input.value))\n",
        "\n",
        "display(process_button, confirm_button, textarea_output)\n",
        "\n",
        "# Bagian kode kedua\n",
        "def get_quran_ayats(surah_number, from_ayat, to_ayat, splits):\n",
        "    combined_text = \"\"\n",
        "    arabic_numerals = [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"]\n",
        "\n",
        "    def convert_to_arabic_number(num):\n",
        "        reversed_num = str(num)[::-1]\n",
        "        return ''.join(arabic_numerals[int(digit)] for digit in reversed_num)\n",
        "\n",
        "    def split_text(text, splits):\n",
        "        words = text.split()\n",
        "        result = []\n",
        "        index = 0\n",
        "        for count in splits:\n",
        "            segment = ' '.join(words[index:index + count])\n",
        "            result.append(segment)\n",
        "            index += count\n",
        "        return '\\n\\n'.join(result)\n",
        "\n",
        "    for ayat_number in range(from_ayat, to_ayat + 1):\n",
        "        url = f\"https://api.quran.com/api/v4/quran/verses/uthmani?verse_key={surah_number}:{ayat_number}\"\n",
        "        response = requests.get(url)\n",
        "        if response.status_code == 200:\n",
        "            data = response.json()\n",
        "            ayat_text = data['verses'][0]['text_uthmani']\n",
        "            ayat_text = ayat_text.replace(\"ْ\", \"ۡ\")\n",
        "            ayat_text = ayat_text.replace(\"أُو۟\", \"أُوْ\")\n",
        "            ayat_text = ayat_text.replace(\"ا۟\", \"اْ\")\n",
        "            ayat_text = ayat_text.replace(\"لَـَٔا\", \"لَأٓ\")\n",
        "            ayat_text = ayat_text.replace(\"لۡـَٔا\", \"لۡأٓ\")\n",
        "            ayat_text = ayat_text.replace(\"لِيَسُـۥٓـُٔ\", \"لِيَسُـُٔ\")\n",
        "            ayat_text = ayat_text.replace(\"۞\", \"\")\n",
        "            ayat_text += convert_to_arabic_number(ayat_number)\n",
        "            combined_text += \" \" + ayat_text\n",
        "\n",
        "    combined_text = combined_text.replace(\" ۖ\", \"ۖ\").replace(\" ۚ\", \"ۚ\").replace(\" ۗ\", \"ۗ\").replace(\" ۛ\", \"ۛ\").replace(\" ۙ\", \"ۙ\").replace(\" ۘ\", \"ۘ\").replace(\" ۜ\", \"ۜ\").replace(\" ۩\", \"۩\")\n",
        "\n",
        "    combined_text = combined_text.strip()\n",
        "    result_text = split_text(combined_text, splits)\n",
        "\n",
        "    return result_text\n",
        "\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    output_srt_file = 'output_ayat.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)"
      ],
      "metadata": {
        "id": "dnDSZm03cdn1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# @title 3. MENTERJEMAHKAN AYAT QURAN TO INDONESIAN TRANSLATE { display-mode: \"form\" }\n",
        "# @markdown Isi parameter surah, ayat, dan group size input kemudian klik proses.\n",
        "\n",
        "import requests\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML, clear_output\n",
        "import re\n",
        "\n",
        "# Fungsi untuk mengambil data surah dan ayat dari API\n",
        "def fetch_surah_ayah_data():\n",
        "    surah_response = requests.get(\"https://api.quran.com/api/v4/chapters\")\n",
        "    if surah_response.status_code == 200:\n",
        "        surah_data = surah_response.json()\n",
        "        surah_list = [(surah[\"id\"], surah[\"name_simple\"]) for surah in surah_data[\"chapters\"]]\n",
        "        return surah_list\n",
        "    else:\n",
        "        print(\"Error fetching surah data\")\n",
        "        return []\n",
        "\n",
        "# Fungsi untuk mengambil ayat dari API\n",
        "def fetch_verses(surah, start, end, language=\"id\", translations=\"33\"):\n",
        "    verses = []\n",
        "    for ayah_number in range(start, end + 1):\n",
        "        endpoint = f\"https://api.quran.com/api/v4/verses/by_key/{surah}:{ayah_number}\"\n",
        "        params = {\n",
        "            \"language\": language,\n",
        "            \"words\": \"true\",\n",
        "            \"translations\": translations,\n",
        "            \"fields\": \"words,translation\"\n",
        "        }\n",
        "        response = requests.get(endpoint, params=params)\n",
        "        if response.status_code == 200:\n",
        "            verses.append(response.json()['verse'])\n",
        "        else:\n",
        "            print(f\"Error fetching Ayat {surah}:{ayah_number}: {response.status_code}\")\n",
        "    return verses\n",
        "\n",
        "# Fungsi untuk ekstraksi terjemahan dari ayat\n",
        "def extract_translations(verses):\n",
        "    translations = []\n",
        "    for ayah in verses:\n",
        "        words = ayah.get('words', [])\n",
        "        translations.extend([word['translation']['text'] for word in words if word['char_type_name'] != 'end'])\n",
        "    return translations\n",
        "\n",
        "# Fungsi untuk memproses terjemahan\n",
        "def process_translations(translations):\n",
        "    processed = []\n",
        "    for translation in translations:\n",
        "        if \"/\" in translation:\n",
        "            parts = translation.split('/')\n",
        "            processed.append(parts[0] + \" (\" + parts[1] + \")\")\n",
        "        else:\n",
        "            processed.append(translation)\n",
        "    return processed\n",
        "\n",
        "# Fungsi untuk mengambil jumlah kata dari setiap baris teks Arab dalam file SRT\n",
        "def get_arabic_word_counts(srt_file_path):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    word_counts = []\n",
        "    current_count = 0\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            if current_count > 0:\n",
        "                word_counts.append(current_count)\n",
        "            current_count = 0\n",
        "        elif '-->' not in line and line.strip():\n",
        "            words = re.findall(r'\\b\\w+\\b', line)\n",
        "            current_count += len(words)\n",
        "    if current_count > 0:\n",
        "        word_counts.append(current_count)\n",
        "\n",
        "    return word_counts\n",
        "\n",
        "# Fungsi untuk membagi terjemahan ke dalam grup\n",
        "def split_into_groups(translations, group_sizes):\n",
        "    groups = []\n",
        "    start = 0\n",
        "    for size in group_sizes:\n",
        "        group = translations[start:start + size]\n",
        "        groups.append(' '.join(group))\n",
        "        start += size\n",
        "    return groups\n",
        "\n",
        "# Fungsi untuk menggantikan teks dalam file SRT\n",
        "def replace_srt_text(srt_file_path, new_text):\n",
        "    with open(srt_file_path, 'r', encoding='utf-8') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    new_lines = []\n",
        "    text_index = 0\n",
        "    text_parts = new_text.split('\\n\\n')\n",
        "\n",
        "    for line in lines:\n",
        "        if line.strip().isdigit():\n",
        "            new_lines.append(line)\n",
        "        elif '-->' in line:\n",
        "            new_lines.append(line)\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n')\n",
        "                text_index += 1\n",
        "        else:\n",
        "            if text_index < len(text_parts):\n",
        "                new_lines.append(text_parts[text_index] + '\\n')\n",
        "            else:\n",
        "                new_lines.append('\\n')\n",
        "\n",
        "    output_srt_file = 'output_terjemahan.srt'\n",
        "    with open(output_srt_file, 'w', encoding='utf-8') as file:\n",
        "        file.writelines(new_lines)\n",
        "\n",
        "    return ''.join(new_lines)\n",
        "\n",
        "# Fungsi untuk menampilkan widget parameter surah dan ayat\n",
        "def show_parameters():\n",
        "    surah_list = fetch_surah_ayah_data()\n",
        "    surah_options = [(f\"{surah_name} ({surah_id})\", surah_id) for surah_id, surah_name in surah_list]\n",
        "\n",
        "    process_button = widgets.Button(description=\"Proses\")\n",
        "    gif_output = widgets.Output()\n",
        "\n",
        "    display(process_button, widgets.HTML(\"<br>\"), gif_output)\n",
        "\n",
        "    def on_button_click(b):\n",
        "        global selected_surah, selected_from_ayat, selected_to_ayat\n",
        "        with gif_output:\n",
        "            clear_output(wait=True)\n",
        "            display(HTML(\"<img src='https://i.gifer.com/ZZ5H.gif' width='50' height='50' />\"))\n",
        "\n",
        "        surah_number = selected_surah\n",
        "        from_ayat = selected_from_ayat\n",
        "        to_ayat = selected_to_ayat\n",
        "\n",
        "        # Fetch the verses\n",
        "        verses = fetch_verses(surah_number, from_ayat, to_ayat)\n",
        "\n",
        "        # Extract translations\n",
        "        translations = extract_translations(verses)\n",
        "\n",
        "        # Process translations\n",
        "        processed_translations = process_translations(translations)\n",
        "\n",
        "        # Get Arabic word counts from SRT file\n",
        "        srt_path = '/content/output_ayat.srt'\n",
        "        group_sizes = get_arabic_word_counts(srt_path)\n",
        "\n",
        "        # Split translations into specified groups\n",
        "        grouped_translations = split_into_groups(processed_translations, group_sizes)\n",
        "\n",
        "        # Replace SRT text with new translations\n",
        "        new_srt_content = replace_srt_text(srt_path, '\\n\\n'.join(grouped_translations))\n",
        "\n",
        "        # Hentikan animasi GIF dan tampilkan hasil\n",
        "        clear_output(wait=True)\n",
        "\n",
        "        # Display the modified SRT content with a copy button\n",
        "        display(HTML(f'''\n",
        "            <textarea id=\"srtContent\" style=\"width:100%;height:200px;\">{new_srt_content}</textarea>\n",
        "            <button onclick=\"copyToClipboard()\">Copy</button>\n",
        "            <p id=\"copyMessage\" style=\"display:none;color:green;\">Copied to clipboard!</p>\n",
        "            <script>\n",
        "            function copyToClipboard() {{\n",
        "                var copyText = document.getElementById(\"srtContent\");\n",
        "                navigator.clipboard.writeText(copyText.value).then(function() {{\n",
        "                    var copyMessage = document.getElementById(\"copyMessage\");\n",
        "                    copyMessage.style.display = \"block\";\n",
        "                    setTimeout(function() {{\n",
        "                        copyMessage.style.display = \"none\";\n",
        "                    }}, 2000);\n",
        "                }});\n",
        "            }}\n",
        "            </script>\n",
        "        '''))\n",
        "\n",
        "    process_button.on_click(on_button_click)\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "show_parameters()"
      ],
      "metadata": {
        "id": "BkfCrnJz7nI9"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}